// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/v1/department.proto

package v1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 部门信息公共数据结构
type DepartmentInfo struct {
	Id         int32                  `protobuf:"varint,1,opt,name=Id,proto3" json:"name"`
	Name       string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"id"`
	Pid        int32                  `protobuf:"varint,3,opt,name=Pid,proto3" json:"pid"`
	Remark     string                 `protobuf:"bytes,4,opt,name=Remark,proto3" json:"remark"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=CreateTime,proto3" json:"createTime"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=UpdateTime,proto3" json:"updateTime"`
}

func (m *DepartmentInfo) Reset()         { *m = DepartmentInfo{} }
func (m *DepartmentInfo) String() string { return proto.CompactTextString(m) }
func (*DepartmentInfo) ProtoMessage()    {}
func (*DepartmentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccd023eab20bbe0, []int{0}
}
func (m *DepartmentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepartmentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepartmentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepartmentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentInfo.Merge(m, src)
}
func (m *DepartmentInfo) XXX_Size() int {
	return m.Size()
}
func (m *DepartmentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentInfo proto.InternalMessageInfo

func (m *DepartmentInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DepartmentInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DepartmentInfo) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *DepartmentInfo) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *DepartmentInfo) GetCreateTime() *timestamppb.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *DepartmentInfo) GetUpdateTime() *timestamppb.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// 创建数据接口输入数据结构
type CreateDepartmentReq struct {
	Pid    int32  `protobuf:"varint,1,opt,name=Pid,proto3" json:"Pid,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Remark string `protobuf:"bytes,3,opt,name=Remark,proto3" json:"Remark,omitempty"`
}

func (m *CreateDepartmentReq) Reset()         { *m = CreateDepartmentReq{} }
func (m *CreateDepartmentReq) String() string { return proto.CompactTextString(m) }
func (*CreateDepartmentReq) ProtoMessage()    {}
func (*CreateDepartmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccd023eab20bbe0, []int{1}
}
func (m *CreateDepartmentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDepartmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDepartmentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDepartmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDepartmentReq.Merge(m, src)
}
func (m *CreateDepartmentReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateDepartmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDepartmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDepartmentReq proto.InternalMessageInfo

func (m *CreateDepartmentReq) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CreateDepartmentReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateDepartmentReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

// 创建数据接口输出数据结构
type CreateDepartmentRes struct {
	Department *DepartmentInfo `protobuf:"bytes,1,opt,name=Department,proto3" json:"Department,omitempty"`
}

func (m *CreateDepartmentRes) Reset()         { *m = CreateDepartmentRes{} }
func (m *CreateDepartmentRes) String() string { return proto.CompactTextString(m) }
func (*CreateDepartmentRes) ProtoMessage()    {}
func (*CreateDepartmentRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccd023eab20bbe0, []int{2}
}
func (m *CreateDepartmentRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDepartmentRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDepartmentRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDepartmentRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDepartmentRes.Merge(m, src)
}
func (m *CreateDepartmentRes) XXX_Size() int {
	return m.Size()
}
func (m *CreateDepartmentRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDepartmentRes.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDepartmentRes proto.InternalMessageInfo

func (m *CreateDepartmentRes) GetDepartment() *DepartmentInfo {
	if m != nil {
		return m.Department
	}
	return nil
}

// 获取详情接口输入数据结构
type GetOneDepartmentReq struct {
	Id   int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *GetOneDepartmentReq) Reset()         { *m = GetOneDepartmentReq{} }
func (m *GetOneDepartmentReq) String() string { return proto.CompactTextString(m) }
func (*GetOneDepartmentReq) ProtoMessage()    {}
func (*GetOneDepartmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccd023eab20bbe0, []int{3}
}
func (m *GetOneDepartmentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneDepartmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneDepartmentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneDepartmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneDepartmentReq.Merge(m, src)
}
func (m *GetOneDepartmentReq) XXX_Size() int {
	return m.Size()
}
func (m *GetOneDepartmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneDepartmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneDepartmentReq proto.InternalMessageInfo

func (m *GetOneDepartmentReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetOneDepartmentReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 获取详情接口输出数据结构
type GetOneDepartmentRes struct {
	Department *DepartmentInfo `protobuf:"bytes,1,opt,name=Department,proto3" json:"Department,omitempty"`
}

func (m *GetOneDepartmentRes) Reset()         { *m = GetOneDepartmentRes{} }
func (m *GetOneDepartmentRes) String() string { return proto.CompactTextString(m) }
func (*GetOneDepartmentRes) ProtoMessage()    {}
func (*GetOneDepartmentRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccd023eab20bbe0, []int{4}
}
func (m *GetOneDepartmentRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneDepartmentRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneDepartmentRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneDepartmentRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneDepartmentRes.Merge(m, src)
}
func (m *GetOneDepartmentRes) XXX_Size() int {
	return m.Size()
}
func (m *GetOneDepartmentRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneDepartmentRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneDepartmentRes proto.InternalMessageInfo

func (m *GetOneDepartmentRes) GetDepartment() *DepartmentInfo {
	if m != nil {
		return m.Department
	}
	return nil
}

// 部门列表接口输入数据结构
type GetListDepartmentReq struct {
	Page       int32           `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	Size_      int32           `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	Department *DepartmentInfo `protobuf:"bytes,3,opt,name=Department,proto3" json:"Department,omitempty"`
}

func (m *GetListDepartmentReq) Reset()         { *m = GetListDepartmentReq{} }
func (m *GetListDepartmentReq) String() string { return proto.CompactTextString(m) }
func (*GetListDepartmentReq) ProtoMessage()    {}
func (*GetListDepartmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccd023eab20bbe0, []int{5}
}
func (m *GetListDepartmentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetListDepartmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetListDepartmentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetListDepartmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetListDepartmentReq.Merge(m, src)
}
func (m *GetListDepartmentReq) XXX_Size() int {
	return m.Size()
}
func (m *GetListDepartmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetListDepartmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetListDepartmentReq proto.InternalMessageInfo

func (m *GetListDepartmentReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetListDepartmentReq) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *GetListDepartmentReq) GetDepartment() *DepartmentInfo {
	if m != nil {
		return m.Department
	}
	return nil
}

// 部门列表接口输出数据结构
type GetListDepartmentRes struct {
	Page      int32             `protobuf:"varint,1,opt,name=Page,proto3" json:"page"`
	Size_     int32             `protobuf:"varint,2,opt,name=Size,proto3" json:"size"`
	TotalPage int32             `protobuf:"varint,3,opt,name=TotalPage,proto3" json:"totalPage"`
	Data      []*DepartmentInfo `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *GetListDepartmentRes) Reset()         { *m = GetListDepartmentRes{} }
func (m *GetListDepartmentRes) String() string { return proto.CompactTextString(m) }
func (*GetListDepartmentRes) ProtoMessage()    {}
func (*GetListDepartmentRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccd023eab20bbe0, []int{6}
}
func (m *GetListDepartmentRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetListDepartmentRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetListDepartmentRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetListDepartmentRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetListDepartmentRes.Merge(m, src)
}
func (m *GetListDepartmentRes) XXX_Size() int {
	return m.Size()
}
func (m *GetListDepartmentRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetListDepartmentRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetListDepartmentRes proto.InternalMessageInfo

func (m *GetListDepartmentRes) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetListDepartmentRes) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *GetListDepartmentRes) GetTotalPage() int32 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *GetListDepartmentRes) GetData() []*DepartmentInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

// 修改数据接口输入数据结构
type ModifyDepartmentReq struct {
	Id     int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Pid    int32  `protobuf:"varint,2,opt,name=Pid,proto3" json:"Pid,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Remark string `protobuf:"bytes,4,opt,name=Remark,proto3" json:"Remark,omitempty"`
}

func (m *ModifyDepartmentReq) Reset()         { *m = ModifyDepartmentReq{} }
func (m *ModifyDepartmentReq) String() string { return proto.CompactTextString(m) }
func (*ModifyDepartmentReq) ProtoMessage()    {}
func (*ModifyDepartmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccd023eab20bbe0, []int{7}
}
func (m *ModifyDepartmentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyDepartmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyDepartmentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModifyDepartmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyDepartmentReq.Merge(m, src)
}
func (m *ModifyDepartmentReq) XXX_Size() int {
	return m.Size()
}
func (m *ModifyDepartmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyDepartmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyDepartmentReq proto.InternalMessageInfo

func (m *ModifyDepartmentReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModifyDepartmentReq) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ModifyDepartmentReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModifyDepartmentReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

// 修改数据接口输出数据结构
type ModifyDepartmentRes struct {
	Department *DepartmentInfo `protobuf:"bytes,1,opt,name=Department,proto3" json:"Department,omitempty"`
}

func (m *ModifyDepartmentRes) Reset()         { *m = ModifyDepartmentRes{} }
func (m *ModifyDepartmentRes) String() string { return proto.CompactTextString(m) }
func (*ModifyDepartmentRes) ProtoMessage()    {}
func (*ModifyDepartmentRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccd023eab20bbe0, []int{8}
}
func (m *ModifyDepartmentRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyDepartmentRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyDepartmentRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModifyDepartmentRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyDepartmentRes.Merge(m, src)
}
func (m *ModifyDepartmentRes) XXX_Size() int {
	return m.Size()
}
func (m *ModifyDepartmentRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyDepartmentRes.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyDepartmentRes proto.InternalMessageInfo

func (m *ModifyDepartmentRes) GetDepartment() *DepartmentInfo {
	if m != nil {
		return m.Department
	}
	return nil
}

// 删除数据接口输入数据结构
type DeleteDepartmentReq struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *DeleteDepartmentReq) Reset()         { *m = DeleteDepartmentReq{} }
func (m *DeleteDepartmentReq) String() string { return proto.CompactTextString(m) }
func (*DeleteDepartmentReq) ProtoMessage()    {}
func (*DeleteDepartmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccd023eab20bbe0, []int{9}
}
func (m *DeleteDepartmentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteDepartmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteDepartmentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteDepartmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDepartmentReq.Merge(m, src)
}
func (m *DeleteDepartmentReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteDepartmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDepartmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDepartmentReq proto.InternalMessageInfo

func (m *DeleteDepartmentReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 删除数据接口输出数据结构
type DeleteDepartmentRes struct {
	IsSuccess bool   `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"isSuccess"`
	Msg       string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"msg"`
}

func (m *DeleteDepartmentRes) Reset()         { *m = DeleteDepartmentRes{} }
func (m *DeleteDepartmentRes) String() string { return proto.CompactTextString(m) }
func (*DeleteDepartmentRes) ProtoMessage()    {}
func (*DeleteDepartmentRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccd023eab20bbe0, []int{10}
}
func (m *DeleteDepartmentRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteDepartmentRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteDepartmentRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteDepartmentRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDepartmentRes.Merge(m, src)
}
func (m *DeleteDepartmentRes) XXX_Size() int {
	return m.Size()
}
func (m *DeleteDepartmentRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDepartmentRes.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDepartmentRes proto.InternalMessageInfo

func (m *DeleteDepartmentRes) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *DeleteDepartmentRes) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*DepartmentInfo)(nil), "common.DepartmentInfo")
	proto.RegisterType((*CreateDepartmentReq)(nil), "common.CreateDepartmentReq")
	proto.RegisterType((*CreateDepartmentRes)(nil), "common.CreateDepartmentRes")
	proto.RegisterType((*GetOneDepartmentReq)(nil), "common.GetOneDepartmentReq")
	proto.RegisterType((*GetOneDepartmentRes)(nil), "common.GetOneDepartmentRes")
	proto.RegisterType((*GetListDepartmentReq)(nil), "common.GetListDepartmentReq")
	proto.RegisterType((*GetListDepartmentRes)(nil), "common.GetListDepartmentRes")
	proto.RegisterType((*ModifyDepartmentReq)(nil), "common.ModifyDepartmentReq")
	proto.RegisterType((*ModifyDepartmentRes)(nil), "common.ModifyDepartmentRes")
	proto.RegisterType((*DeleteDepartmentReq)(nil), "common.DeleteDepartmentReq")
	proto.RegisterType((*DeleteDepartmentRes)(nil), "common.DeleteDepartmentRes")
}

func init() { proto.RegisterFile("common/v1/department.proto", fileDescriptor_7ccd023eab20bbe0) }

var fileDescriptor_7ccd023eab20bbe0 = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdf, 0x6a, 0xd4, 0x4e,
	0x14, 0xde, 0xfc, 0x69, 0xda, 0x4e, 0xf9, 0x95, 0x1f, 0xb3, 0x52, 0x62, 0x2c, 0x9b, 0x25, 0x20,
	0x14, 0xc5, 0xc4, 0xb6, 0xb4, 0xda, 0xdb, 0x75, 0xa1, 0xac, 0x58, 0x2d, 0xd3, 0x7a, 0x23, 0x88,
	0xa4, 0xc9, 0x6c, 0x8c, 0x6e, 0x76, 0xd2, 0x9d, 0xd9, 0x82, 0x7d, 0x0a, 0x5f, 0xc0, 0x27, 0xf0,
	0x45, 0xbc, 0xec, 0xa5, 0x57, 0x41, 0xda, 0xbb, 0x80, 0xef, 0x20, 0x99, 0x49, 0x36, 0xe9, 0x6e,
	0x08, 0xa5, 0x77, 0x99, 0xf3, 0x9d, 0xf3, 0x9d, 0xef, 0xfc, 0x99, 0x09, 0x30, 0x3c, 0x12, 0x45,
	0x64, 0xec, 0x5c, 0x6c, 0x3b, 0x3e, 0x8e, 0xdd, 0x09, 0x8b, 0xf0, 0x98, 0xd9, 0xf1, 0x84, 0x30,
	0x02, 0x35, 0x81, 0x19, 0x66, 0x40, 0x48, 0x30, 0xc2, 0x0e, 0xb7, 0x9e, 0x4d, 0x87, 0x0e, 0x0b,
	0x23, 0x4c, 0x99, 0x1b, 0xc5, 0xc2, 0xd1, 0x78, 0x16, 0x84, 0xec, 0xf3, 0xf4, 0xcc, 0xf6, 0x48,
	0xe4, 0x04, 0x24, 0x20, 0xa5, 0x67, 0x76, 0xe2, 0x07, 0xfe, 0x25, 0xdc, 0xad, 0x1f, 0x32, 0x58,
	0xef, 0xcf, 0x92, 0x0d, 0xc6, 0x43, 0x02, 0x75, 0x20, 0x0f, 0x7c, 0x5d, 0xea, 0x4a, 0x5b, 0x4b,
	0xbd, 0x95, 0x34, 0x31, 0xd5, 0xb1, 0x1b, 0x61, 0x24, 0x0f, 0x7c, 0x68, 0x00, 0xf5, 0xad, 0x1b,
	0x61, 0x5d, 0xee, 0x4a, 0x5b, 0xab, 0x3d, 0x2d, 0x4d, 0x4c, 0x39, 0xf4, 0x11, 0xb7, 0xc1, 0x87,
	0x40, 0x39, 0x0e, 0x7d, 0x5d, 0xe1, 0x61, 0xcb, 0x69, 0x62, 0x2a, 0x71, 0xe8, 0xa3, 0xcc, 0x06,
	0x2d, 0xa0, 0x21, 0x1c, 0xb9, 0x93, 0xaf, 0xba, 0xca, 0x03, 0x41, 0x9a, 0x98, 0xda, 0x84, 0x5b,
	0x50, 0x8e, 0xc0, 0xd7, 0x00, 0xbc, 0x9a, 0x60, 0x97, 0xe1, 0xd3, 0x30, 0xc2, 0xfa, 0x52, 0x57,
	0xda, 0x5a, 0xdb, 0x31, 0x6c, 0x51, 0xac, 0x5d, 0x94, 0x60, 0x9f, 0x16, 0xc5, 0xf6, 0xd6, 0xd3,
	0xc4, 0x04, 0xde, 0x2c, 0x02, 0x55, 0xa2, 0x33, 0xae, 0xf7, 0xb1, 0x5f, 0x70, 0x69, 0x77, 0xe3,
	0x9a, 0xce, 0x22, 0x50, 0x25, 0xda, 0x3a, 0x01, 0x6d, 0xc1, 0x5c, 0x36, 0x09, 0xe1, 0x73, 0xf8,
	0xbf, 0xa8, 0x96, 0x37, 0x49, 0x14, 0x09, 0xab, 0xbd, 0xc9, 0x7b, 0xb2, 0x31, 0x2b, 0x5c, 0xe1,
	0xd6, 0xfc, 0x64, 0x1d, 0xd5, 0x91, 0x52, 0xb8, 0x0f, 0x40, 0x69, 0xe0, 0xdc, 0x6b, 0x3b, 0x1b,
	0xb6, 0x18, 0xbc, 0x7d, 0x7b, 0x48, 0xa8, 0xe2, 0x69, 0x1d, 0x80, 0xf6, 0x21, 0x66, 0xef, 0xc6,
	0x73, 0x1a, 0xd7, 0xcb, 0x39, 0xf2, 0xe9, 0xd5, 0x28, 0xcc, 0x94, 0x2c, 0x86, 0xde, 0x5f, 0xc9,
	0x05, 0x78, 0x70, 0x88, 0xd9, 0x9b, 0x90, 0xb2, 0xdb, 0x52, 0x20, 0x50, 0x8f, 0xdd, 0x00, 0xe7,
	0x62, 0xf8, 0x77, 0x66, 0x3b, 0x09, 0x2f, 0x85, 0x9c, 0x25, 0xc4, 0xbf, 0xe7, 0xf2, 0x2a, 0x77,
	0xce, 0xfb, 0x53, 0xaa, 0x4d, 0x4c, 0xe1, 0x66, 0x35, 0xb1, 0xd8, 0xe6, 0xd8, 0x0d, 0x70, 0x2e,
	0x61, 0xb3, 0x2a, 0x41, 0xa0, 0x34, 0xbc, 0xc4, 0xb9, 0x98, 0xa7, 0x60, 0xf5, 0x94, 0x30, 0x77,
	0xc4, 0x09, 0xc4, 0x5e, 0xff, 0x97, 0x26, 0xe6, 0x2a, 0x2b, 0x8c, 0xa8, 0xc4, 0xe1, 0x13, 0xa0,
	0xf6, 0x5d, 0xe6, 0xea, 0x6a, 0x57, 0x69, 0xd0, 0xcc, 0x7d, 0x2c, 0x0f, 0xb4, 0x8f, 0x88, 0x1f,
	0x0e, 0xbf, 0x35, 0xcf, 0x2b, 0xdf, 0x31, 0x79, 0x71, 0xc7, 0x94, 0xda, 0x1d, 0x53, 0xe7, 0x77,
	0x6c, 0x31, 0xc9, 0xfd, 0x27, 0xfb, 0x18, 0xb4, 0xfb, 0x78, 0x84, 0x59, 0xf3, 0x8e, 0x59, 0x1f,
	0xeb, 0xdc, 0x68, 0xd6, 0xca, 0x01, 0x3d, 0x99, 0x7a, 0x1e, 0xa6, 0x94, 0x7b, 0xaf, 0x88, 0x56,
	0x86, 0x85, 0x11, 0x95, 0x78, 0xf6, 0x92, 0x1c, 0xd1, 0x20, 0x7f, 0x64, 0xf8, 0x4b, 0x12, 0xd1,
	0x00, 0x65, 0xb6, 0x9d, 0xbf, 0x72, 0x55, 0x3e, 0xec, 0x03, 0x4d, 0xdc, 0x23, 0xf8, 0xa8, 0x28,
	0xa1, 0xe6, 0xb2, 0x1a, 0x0d, 0x20, 0xb5, 0x5a, 0x19, 0x8b, 0xb8, 0x03, 0x25, 0x4b, 0xcd, 0x75,
	0x32, 0x1a, 0xc0, 0x8c, 0xe5, 0x10, 0x2c, 0xe7, 0x1b, 0x08, 0x37, 0x2b, 0x9e, 0x0b, 0x77, 0xc1,
	0x68, 0x42, 0x73, 0x39, 0x62, 0x70, 0xa5, 0x9c, 0x9a, 0x6d, 0x31, 0x1a, 0xc0, 0x9c, 0x45, 0x0c,
	0xa2, 0x64, 0xa9, 0x99, 0x9f, 0xd1, 0x00, 0x52, 0xab, 0xd5, 0x43, 0xbf, 0xae, 0x3b, 0xd2, 0xd5,
	0x75, 0x47, 0xfa, 0x73, 0xdd, 0x91, 0xbe, 0xdf, 0x74, 0x5a, 0x57, 0x37, 0x9d, 0xd6, 0xef, 0x9b,
	0x4e, 0xeb, 0xc3, 0xcb, 0xca, 0x6f, 0x66, 0xf4, 0x65, 0x7b, 0xef, 0xc5, 0xf3, 0xfd, 0x83, 0xdd,
	0xfd, 0xbd, 0x03, 0x27, 0x18, 0x7a, 0xe7, 0x9f, 0xf8, 0x23, 0xeb, 0x39, 0x75, 0xff, 0xb3, 0x33,
	0x8d, 0x83, 0xbb, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x55, 0x3a, 0x8e, 0x77, 0xee, 0x06, 0x00,
	0x00,
}

func (m *DepartmentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepartmentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepartmentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateTime != nil {
		{
			size, err := m.UpdateTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDepartment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreateTime != nil {
		{
			size, err := m.CreateTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDepartment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x22
	}
	if m.Pid != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateDepartmentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDepartmentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDepartmentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pid != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateDepartmentRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDepartmentRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDepartmentRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Department != nil {
		{
			size, err := m.Department.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDepartment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOneDepartmentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneDepartmentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneDepartmentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOneDepartmentRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneDepartmentRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneDepartmentRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Department != nil {
		{
			size, err := m.Department.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDepartment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetListDepartmentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetListDepartmentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetListDepartmentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Department != nil {
		{
			size, err := m.Department.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDepartment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetListDepartmentRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetListDepartmentRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetListDepartmentRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDepartment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TotalPage != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.TotalPage))
		i--
		dAtA[i] = 0x18
	}
	if m.Size_ != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModifyDepartmentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyDepartmentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyDepartmentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pid != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModifyDepartmentRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyDepartmentRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyDepartmentRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Department != nil {
		{
			size, err := m.Department.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDepartment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteDepartmentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDepartmentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteDepartmentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteDepartmentRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDepartmentRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteDepartmentRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDepartment(dAtA []byte, offset int, v uint64) int {
	offset -= sovDepartment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepartmentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepartment(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	if m.Pid != 0 {
		n += 1 + sovDepartment(uint64(m.Pid))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	if m.CreateTime != nil {
		l = m.CreateTime.Size()
		n += 1 + l + sovDepartment(uint64(l))
	}
	if m.UpdateTime != nil {
		l = m.UpdateTime.Size()
		n += 1 + l + sovDepartment(uint64(l))
	}
	return n
}

func (m *CreateDepartmentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovDepartment(uint64(m.Pid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	return n
}

func (m *CreateDepartmentRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Department != nil {
		l = m.Department.Size()
		n += 1 + l + sovDepartment(uint64(l))
	}
	return n
}

func (m *GetOneDepartmentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepartment(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	return n
}

func (m *GetOneDepartmentRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Department != nil {
		l = m.Department.Size()
		n += 1 + l + sovDepartment(uint64(l))
	}
	return n
}

func (m *GetListDepartmentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovDepartment(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovDepartment(uint64(m.Size_))
	}
	if m.Department != nil {
		l = m.Department.Size()
		n += 1 + l + sovDepartment(uint64(l))
	}
	return n
}

func (m *GetListDepartmentRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovDepartment(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovDepartment(uint64(m.Size_))
	}
	if m.TotalPage != 0 {
		n += 1 + sovDepartment(uint64(m.TotalPage))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovDepartment(uint64(l))
		}
	}
	return n
}

func (m *ModifyDepartmentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepartment(uint64(m.Id))
	}
	if m.Pid != 0 {
		n += 1 + sovDepartment(uint64(m.Pid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	return n
}

func (m *ModifyDepartmentRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Department != nil {
		l = m.Department.Size()
		n += 1 + l + sovDepartment(uint64(l))
	}
	return n
}

func (m *DeleteDepartmentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepartment(uint64(m.Id))
	}
	return n
}

func (m *DeleteDepartmentRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSuccess {
		n += 2
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	return n
}

func sovDepartment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDepartment(x uint64) (n int) {
	return sovDepartment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepartmentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepartmentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepartmentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateTime == nil {
				m.CreateTime = &timestamppb.Timestamp{}
			}
			if err := m.CreateTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateTime == nil {
				m.UpdateTime = &timestamppb.Timestamp{}
			}
			if err := m.UpdateTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDepartmentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDepartmentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDepartmentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDepartmentRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDepartmentRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDepartmentRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Department == nil {
				m.Department = &DepartmentInfo{}
			}
			if err := m.Department.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneDepartmentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneDepartmentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneDepartmentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneDepartmentRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneDepartmentRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneDepartmentRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Department == nil {
				m.Department = &DepartmentInfo{}
			}
			if err := m.Department.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetListDepartmentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetListDepartmentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetListDepartmentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Department == nil {
				m.Department = &DepartmentInfo{}
			}
			if err := m.Department.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetListDepartmentRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetListDepartmentRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetListDepartmentRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &DepartmentInfo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyDepartmentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyDepartmentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyDepartmentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyDepartmentRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyDepartmentRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyDepartmentRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Department == nil {
				m.Department = &DepartmentInfo{}
			}
			if err := m.Department.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDepartmentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDepartmentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDepartmentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDepartmentRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDepartmentRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDepartmentRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDepartment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDepartment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDepartment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDepartment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDepartment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDepartment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDepartment = fmt.Errorf("proto: unexpected end of group")
)
