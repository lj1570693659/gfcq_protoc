// protoc --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: config/inspirit/v1/crew_kpi_rule.proto

package v1

import (
	context "context"
	v1 "github.com/lj1570693659/gfcq_protoc/config/product/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CrewKpiRule is the golang structure for table cqgf_crew_kpi_rule.
type CrewKpiRuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Redio      float32           `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio,omitempty"`                                     // 比例
	LevelName  string            `protobuf:"bytes,3,opt,name=LevelName,proto3" json:"LevelName,omitempty"`                               // 等级名称
	ScoreMin   int32             `protobuf:"varint,4,opt,name=ScoreMin,proto3" json:"ScoreMin,omitempty"`                                // 分值下限
	ScoreMax   int32             `protobuf:"varint,5,opt,name=ScoreMax,proto3" json:"ScoreMax,omitempty"`                                // 分值上限
	ScoreRange v1.ScoreRangeEnum `protobuf:"varint,6,opt,name=ScoreRange,proto3,enum=config.ScoreRangeEnum" json:"ScoreRange,omitempty"` // 分数区间包含关系（1：左闭右开，2：左开右闭, 3: 左右闭口 4：左右开口）
	Remark     string            `protobuf:"bytes,7,opt,name=Remark,proto3" json:"Remark,omitempty"`                                     // 预留备注说明信息
	CreateTime string            `protobuf:"bytes,8,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`                             // 数据新增时间
	UpdateTime string            `protobuf:"bytes,9,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`                             // 最后一次更新数据时间
}

func (x *CrewKpiRuleInfo) Reset() {
	*x = CrewKpiRuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrewKpiRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrewKpiRuleInfo) ProtoMessage() {}

func (x *CrewKpiRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrewKpiRuleInfo.ProtoReflect.Descriptor instead.
func (*CrewKpiRuleInfo) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{0}
}

func (x *CrewKpiRuleInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CrewKpiRuleInfo) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *CrewKpiRuleInfo) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

func (x *CrewKpiRuleInfo) GetScoreMin() int32 {
	if x != nil {
		return x.ScoreMin
	}
	return 0
}

func (x *CrewKpiRuleInfo) GetScoreMax() int32 {
	if x != nil {
		return x.ScoreMax
	}
	return 0
}

func (x *CrewKpiRuleInfo) GetScoreRange() v1.ScoreRangeEnum {
	if x != nil {
		return x.ScoreRange
	}
	return v1.ScoreRangeEnum(0)
}

func (x *CrewKpiRuleInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CrewKpiRuleInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CrewKpiRuleInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 创建数据接口输入数据结构
type CreateCrewKpiRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark     string            `protobuf:"bytes,1,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Redio      float32           `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio,omitempty"`                                     // 比例
	LevelName  string            `protobuf:"bytes,3,opt,name=LevelName,proto3" json:"LevelName,omitempty"`                               // 等级名称
	ScoreMin   int32             `protobuf:"varint,4,opt,name=ScoreMin,proto3" json:"ScoreMin,omitempty"`                                // 分值下限
	ScoreMax   int32             `protobuf:"varint,5,opt,name=ScoreMax,proto3" json:"ScoreMax,omitempty"`                                // 分值上限
	ScoreRange v1.ScoreRangeEnum `protobuf:"varint,6,opt,name=ScoreRange,proto3,enum=config.ScoreRangeEnum" json:"ScoreRange,omitempty"` // 分数区间包含关系（1：左闭右开，2：左开右闭, 3: 左右闭口 4：左右开口）
}

func (x *CreateCrewKpiRuleReq) Reset() {
	*x = CreateCrewKpiRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCrewKpiRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCrewKpiRuleReq) ProtoMessage() {}

func (x *CreateCrewKpiRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCrewKpiRuleReq.ProtoReflect.Descriptor instead.
func (*CreateCrewKpiRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCrewKpiRuleReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateCrewKpiRuleReq) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *CreateCrewKpiRuleReq) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

func (x *CreateCrewKpiRuleReq) GetScoreMin() int32 {
	if x != nil {
		return x.ScoreMin
	}
	return 0
}

func (x *CreateCrewKpiRuleReq) GetScoreMax() int32 {
	if x != nil {
		return x.ScoreMax
	}
	return 0
}

func (x *CreateCrewKpiRuleReq) GetScoreRange() v1.ScoreRangeEnum {
	if x != nil {
		return x.ScoreRange
	}
	return v1.ScoreRangeEnum(0)
}

// 创建数据接口输出数据结构
type CreateCrewKpiRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewKpiRule *CrewKpiRuleInfo `protobuf:"bytes,1,opt,name=CrewKpiRule,proto3" json:"CrewKpiRule,omitempty"`
}

func (x *CreateCrewKpiRuleRes) Reset() {
	*x = CreateCrewKpiRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCrewKpiRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCrewKpiRuleRes) ProtoMessage() {}

func (x *CreateCrewKpiRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCrewKpiRuleRes.ProtoReflect.Descriptor instead.
func (*CreateCrewKpiRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCrewKpiRuleRes) GetCrewKpiRule() *CrewKpiRuleInfo {
	if x != nil {
		return x.CrewKpiRule
	}
	return nil
}

// 获取详情接口输入数据结构
type GetOneCrewKpiRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewKpiRule *CrewKpiRuleInfo `protobuf:"bytes,1,opt,name=CrewKpiRule,proto3" json:"CrewKpiRule,omitempty"`
}

func (x *GetOneCrewKpiRuleReq) Reset() {
	*x = GetOneCrewKpiRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneCrewKpiRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneCrewKpiRuleReq) ProtoMessage() {}

func (x *GetOneCrewKpiRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneCrewKpiRuleReq.ProtoReflect.Descriptor instead.
func (*GetOneCrewKpiRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{3}
}

func (x *GetOneCrewKpiRuleReq) GetCrewKpiRule() *CrewKpiRuleInfo {
	if x != nil {
		return x.CrewKpiRule
	}
	return nil
}

// 获取详情接口输出数据结构
type GetOneCrewKpiRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewKpiRule *CrewKpiRuleInfo `protobuf:"bytes,1,opt,name=CrewKpiRule,proto3" json:"CrewKpiRule,omitempty"`
}

func (x *GetOneCrewKpiRuleRes) Reset() {
	*x = GetOneCrewKpiRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneCrewKpiRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneCrewKpiRuleRes) ProtoMessage() {}

func (x *GetOneCrewKpiRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneCrewKpiRuleRes.ProtoReflect.Descriptor instead.
func (*GetOneCrewKpiRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{4}
}

func (x *GetOneCrewKpiRuleRes) GetCrewKpiRule() *CrewKpiRuleInfo {
	if x != nil {
		return x.CrewKpiRule
	}
	return nil
}

// 列表接口输入数据结构
type GetListCrewKpiRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        int32            `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	Size        int32            `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	CrewKpiRule *CrewKpiRuleInfo `protobuf:"bytes,3,opt,name=CrewKpiRule,proto3" json:"CrewKpiRule,omitempty"`
}

func (x *GetListCrewKpiRuleReq) Reset() {
	*x = GetListCrewKpiRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListCrewKpiRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListCrewKpiRuleReq) ProtoMessage() {}

func (x *GetListCrewKpiRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListCrewKpiRuleReq.ProtoReflect.Descriptor instead.
func (*GetListCrewKpiRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{5}
}

func (x *GetListCrewKpiRuleReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListCrewKpiRuleReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetListCrewKpiRuleReq) GetCrewKpiRule() *CrewKpiRuleInfo {
	if x != nil {
		return x.CrewKpiRule
	}
	return nil
}

// 列表接口输出数据结构
type GetListCrewKpiRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32              `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	Size      int32              `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	TotalSize int32              `protobuf:"varint,3,opt,name=TotalSize,proto3" json:"TotalSize,omitempty"`
	Data      []*CrewKpiRuleInfo `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetListCrewKpiRuleRes) Reset() {
	*x = GetListCrewKpiRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListCrewKpiRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListCrewKpiRuleRes) ProtoMessage() {}

func (x *GetListCrewKpiRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListCrewKpiRuleRes.ProtoReflect.Descriptor instead.
func (*GetListCrewKpiRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{6}
}

func (x *GetListCrewKpiRuleRes) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListCrewKpiRuleRes) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetListCrewKpiRuleRes) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *GetListCrewKpiRuleRes) GetData() []*CrewKpiRuleInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 列表接口输入数据结构
type GetAllCrewKpiRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewKpiRule *CrewKpiRuleInfo `protobuf:"bytes,1,opt,name=CrewKpiRule,proto3" json:"CrewKpiRule,omitempty"`
}

func (x *GetAllCrewKpiRuleReq) Reset() {
	*x = GetAllCrewKpiRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCrewKpiRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCrewKpiRuleReq) ProtoMessage() {}

func (x *GetAllCrewKpiRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCrewKpiRuleReq.ProtoReflect.Descriptor instead.
func (*GetAllCrewKpiRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{7}
}

func (x *GetAllCrewKpiRuleReq) GetCrewKpiRule() *CrewKpiRuleInfo {
	if x != nil {
		return x.CrewKpiRule
	}
	return nil
}

// 列表接口输出数据结构
type GetAllCrewKpiRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CrewKpiRuleInfo `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetAllCrewKpiRuleRes) Reset() {
	*x = GetAllCrewKpiRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCrewKpiRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCrewKpiRuleRes) ProtoMessage() {}

func (x *GetAllCrewKpiRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCrewKpiRuleRes.ProtoReflect.Descriptor instead.
func (*GetAllCrewKpiRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllCrewKpiRuleRes) GetData() []*CrewKpiRuleInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 修改数据接口输入数据结构
type ModifyCrewKpiRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark     string            `protobuf:"bytes,1,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Redio      float32           `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio,omitempty"`                                     // 比例
	LevelName  string            `protobuf:"bytes,3,opt,name=LevelName,proto3" json:"LevelName,omitempty"`                               // 等级名称
	ScoreMin   int32             `protobuf:"varint,4,opt,name=ScoreMin,proto3" json:"ScoreMin,omitempty"`                                // 分值下限
	ScoreMax   int32             `protobuf:"varint,5,opt,name=ScoreMax,proto3" json:"ScoreMax,omitempty"`                                // 分值上限
	ScoreRange v1.ScoreRangeEnum `protobuf:"varint,6,opt,name=ScoreRange,proto3,enum=config.ScoreRangeEnum" json:"ScoreRange,omitempty"` // 分数区间包含关系（1：左闭右开，2：左开右闭, 3: 左右闭口 4：左右开口）
	Id         int32             `protobuf:"varint,7,opt,name=Id,proto3" json:"Id,omitempty"`                                            // v: required
}

func (x *ModifyCrewKpiRuleReq) Reset() {
	*x = ModifyCrewKpiRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCrewKpiRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCrewKpiRuleReq) ProtoMessage() {}

func (x *ModifyCrewKpiRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCrewKpiRuleReq.ProtoReflect.Descriptor instead.
func (*ModifyCrewKpiRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{9}
}

func (x *ModifyCrewKpiRuleReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ModifyCrewKpiRuleReq) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *ModifyCrewKpiRuleReq) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

func (x *ModifyCrewKpiRuleReq) GetScoreMin() int32 {
	if x != nil {
		return x.ScoreMin
	}
	return 0
}

func (x *ModifyCrewKpiRuleReq) GetScoreMax() int32 {
	if x != nil {
		return x.ScoreMax
	}
	return 0
}

func (x *ModifyCrewKpiRuleReq) GetScoreRange() v1.ScoreRangeEnum {
	if x != nil {
		return x.ScoreRange
	}
	return v1.ScoreRangeEnum(0)
}

func (x *ModifyCrewKpiRuleReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 修改数据接口输出数据结构
type ModifyCrewKpiRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewKpiRule *CrewKpiRuleInfo `protobuf:"bytes,3,opt,name=CrewKpiRule,proto3" json:"CrewKpiRule,omitempty"`
}

func (x *ModifyCrewKpiRuleRes) Reset() {
	*x = ModifyCrewKpiRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCrewKpiRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCrewKpiRuleRes) ProtoMessage() {}

func (x *ModifyCrewKpiRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCrewKpiRuleRes.ProtoReflect.Descriptor instead.
func (*ModifyCrewKpiRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{10}
}

func (x *ModifyCrewKpiRuleRes) GetCrewKpiRule() *CrewKpiRuleInfo {
	if x != nil {
		return x.CrewKpiRule
	}
	return nil
}

// 删除数据接口输入数据结构
type DeleteCrewKpiRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"` // v: required
}

func (x *DeleteCrewKpiRuleReq) Reset() {
	*x = DeleteCrewKpiRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCrewKpiRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrewKpiRuleReq) ProtoMessage() {}

func (x *DeleteCrewKpiRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrewKpiRuleReq.ProtoReflect.Descriptor instead.
func (*DeleteCrewKpiRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteCrewKpiRuleReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 删除数据接口输出数据结构
type DeleteCrewKpiRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool   `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"` // v: required
	Msg       string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`              // v: required
}

func (x *DeleteCrewKpiRuleRes) Reset() {
	*x = DeleteCrewKpiRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCrewKpiRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrewKpiRuleRes) ProtoMessage() {}

func (x *DeleteCrewKpiRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrewKpiRuleRes.ProtoReflect.Descriptor instead.
func (*DeleteCrewKpiRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteCrewKpiRuleRes) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *DeleteCrewKpiRuleRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_config_inspirit_v1_crew_kpi_rule_proto protoreflect.FileDescriptor

var file_config_inspirit_v1_crew_kpi_rule_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x77, 0x5f, 0x6b, 0x70, 0x69, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x77,
	0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x52,
	0x65, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x4d, 0x61, 0x78, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0x51, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b,
	0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x51, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x77,
	0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70,
	0x69, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70,
	0x69, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x51,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70,
	0x69, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x43, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x77, 0x4b,
	0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe2, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x4d, 0x61, 0x78, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x14, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x26,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x32, 0xc0,
	0x03, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x72,
	0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70,
	0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x77, 0x4b,
	0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x77, 0x4b, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6c, 0x6a, 0x31, 0x35, 0x37, 0x30, 0x36, 0x39, 0x33, 0x36, 0x35, 0x39, 0x2f, 0x67, 0x66, 0x63,
	0x71, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_config_inspirit_v1_crew_kpi_rule_proto_rawDescOnce sync.Once
	file_config_inspirit_v1_crew_kpi_rule_proto_rawDescData = file_config_inspirit_v1_crew_kpi_rule_proto_rawDesc
)

func file_config_inspirit_v1_crew_kpi_rule_proto_rawDescGZIP() []byte {
	file_config_inspirit_v1_crew_kpi_rule_proto_rawDescOnce.Do(func() {
		file_config_inspirit_v1_crew_kpi_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_inspirit_v1_crew_kpi_rule_proto_rawDescData)
	})
	return file_config_inspirit_v1_crew_kpi_rule_proto_rawDescData
}

var file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_config_inspirit_v1_crew_kpi_rule_proto_goTypes = []interface{}{
	(*CrewKpiRuleInfo)(nil),       // 0: config.CrewKpiRuleInfo
	(*CreateCrewKpiRuleReq)(nil),  // 1: config.CreateCrewKpiRuleReq
	(*CreateCrewKpiRuleRes)(nil),  // 2: config.CreateCrewKpiRuleRes
	(*GetOneCrewKpiRuleReq)(nil),  // 3: config.GetOneCrewKpiRuleReq
	(*GetOneCrewKpiRuleRes)(nil),  // 4: config.GetOneCrewKpiRuleRes
	(*GetListCrewKpiRuleReq)(nil), // 5: config.GetListCrewKpiRuleReq
	(*GetListCrewKpiRuleRes)(nil), // 6: config.GetListCrewKpiRuleRes
	(*GetAllCrewKpiRuleReq)(nil),  // 7: config.GetAllCrewKpiRuleReq
	(*GetAllCrewKpiRuleRes)(nil),  // 8: config.GetAllCrewKpiRuleRes
	(*ModifyCrewKpiRuleReq)(nil),  // 9: config.ModifyCrewKpiRuleReq
	(*ModifyCrewKpiRuleRes)(nil),  // 10: config.ModifyCrewKpiRuleRes
	(*DeleteCrewKpiRuleReq)(nil),  // 11: config.DeleteCrewKpiRuleReq
	(*DeleteCrewKpiRuleRes)(nil),  // 12: config.DeleteCrewKpiRuleRes
	(v1.ScoreRangeEnum)(0),        // 13: config.ScoreRangeEnum
}
var file_config_inspirit_v1_crew_kpi_rule_proto_depIdxs = []int32{
	13, // 0: config.CrewKpiRuleInfo.ScoreRange:type_name -> config.ScoreRangeEnum
	13, // 1: config.CreateCrewKpiRuleReq.ScoreRange:type_name -> config.ScoreRangeEnum
	0,  // 2: config.CreateCrewKpiRuleRes.CrewKpiRule:type_name -> config.CrewKpiRuleInfo
	0,  // 3: config.GetOneCrewKpiRuleReq.CrewKpiRule:type_name -> config.CrewKpiRuleInfo
	0,  // 4: config.GetOneCrewKpiRuleRes.CrewKpiRule:type_name -> config.CrewKpiRuleInfo
	0,  // 5: config.GetListCrewKpiRuleReq.CrewKpiRule:type_name -> config.CrewKpiRuleInfo
	0,  // 6: config.GetListCrewKpiRuleRes.Data:type_name -> config.CrewKpiRuleInfo
	0,  // 7: config.GetAllCrewKpiRuleReq.CrewKpiRule:type_name -> config.CrewKpiRuleInfo
	0,  // 8: config.GetAllCrewKpiRuleRes.Data:type_name -> config.CrewKpiRuleInfo
	13, // 9: config.ModifyCrewKpiRuleReq.ScoreRange:type_name -> config.ScoreRangeEnum
	0,  // 10: config.ModifyCrewKpiRuleRes.CrewKpiRule:type_name -> config.CrewKpiRuleInfo
	1,  // 11: config.CrewKpiRule.Create:input_type -> config.CreateCrewKpiRuleReq
	3,  // 12: config.CrewKpiRule.GetOne:input_type -> config.GetOneCrewKpiRuleReq
	5,  // 13: config.CrewKpiRule.GetList:input_type -> config.GetListCrewKpiRuleReq
	7,  // 14: config.CrewKpiRule.GetAll:input_type -> config.GetAllCrewKpiRuleReq
	9,  // 15: config.CrewKpiRule.Modify:input_type -> config.ModifyCrewKpiRuleReq
	11, // 16: config.CrewKpiRule.Delete:input_type -> config.DeleteCrewKpiRuleReq
	2,  // 17: config.CrewKpiRule.Create:output_type -> config.CreateCrewKpiRuleRes
	4,  // 18: config.CrewKpiRule.GetOne:output_type -> config.GetOneCrewKpiRuleRes
	6,  // 19: config.CrewKpiRule.GetList:output_type -> config.GetListCrewKpiRuleRes
	8,  // 20: config.CrewKpiRule.GetAll:output_type -> config.GetAllCrewKpiRuleRes
	10, // 21: config.CrewKpiRule.Modify:output_type -> config.ModifyCrewKpiRuleRes
	12, // 22: config.CrewKpiRule.Delete:output_type -> config.DeleteCrewKpiRuleRes
	17, // [17:23] is the sub-list for method output_type
	11, // [11:17] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_config_inspirit_v1_crew_kpi_rule_proto_init() }
func file_config_inspirit_v1_crew_kpi_rule_proto_init() {
	if File_config_inspirit_v1_crew_kpi_rule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrewKpiRuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCrewKpiRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCrewKpiRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneCrewKpiRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneCrewKpiRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListCrewKpiRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListCrewKpiRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCrewKpiRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCrewKpiRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCrewKpiRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCrewKpiRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCrewKpiRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCrewKpiRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_inspirit_v1_crew_kpi_rule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_config_inspirit_v1_crew_kpi_rule_proto_goTypes,
		DependencyIndexes: file_config_inspirit_v1_crew_kpi_rule_proto_depIdxs,
		MessageInfos:      file_config_inspirit_v1_crew_kpi_rule_proto_msgTypes,
	}.Build()
	File_config_inspirit_v1_crew_kpi_rule_proto = out.File
	file_config_inspirit_v1_crew_kpi_rule_proto_rawDesc = nil
	file_config_inspirit_v1_crew_kpi_rule_proto_goTypes = nil
	file_config_inspirit_v1_crew_kpi_rule_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrewKpiRuleClient is the client API for CrewKpiRule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrewKpiRuleClient interface {
	Create(ctx context.Context, in *CreateCrewKpiRuleReq, opts ...grpc.CallOption) (*CreateCrewKpiRuleRes, error)
	GetOne(ctx context.Context, in *GetOneCrewKpiRuleReq, opts ...grpc.CallOption) (*GetOneCrewKpiRuleRes, error)
	GetList(ctx context.Context, in *GetListCrewKpiRuleReq, opts ...grpc.CallOption) (*GetListCrewKpiRuleRes, error)
	GetAll(ctx context.Context, in *GetAllCrewKpiRuleReq, opts ...grpc.CallOption) (*GetAllCrewKpiRuleRes, error)
	Modify(ctx context.Context, in *ModifyCrewKpiRuleReq, opts ...grpc.CallOption) (*ModifyCrewKpiRuleRes, error)
	Delete(ctx context.Context, in *DeleteCrewKpiRuleReq, opts ...grpc.CallOption) (*DeleteCrewKpiRuleRes, error)
}

type crewKpiRuleClient struct {
	cc grpc.ClientConnInterface
}

func NewCrewKpiRuleClient(cc grpc.ClientConnInterface) CrewKpiRuleClient {
	return &crewKpiRuleClient{cc}
}

func (c *crewKpiRuleClient) Create(ctx context.Context, in *CreateCrewKpiRuleReq, opts ...grpc.CallOption) (*CreateCrewKpiRuleRes, error) {
	out := new(CreateCrewKpiRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewKpiRule/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewKpiRuleClient) GetOne(ctx context.Context, in *GetOneCrewKpiRuleReq, opts ...grpc.CallOption) (*GetOneCrewKpiRuleRes, error) {
	out := new(GetOneCrewKpiRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewKpiRule/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewKpiRuleClient) GetList(ctx context.Context, in *GetListCrewKpiRuleReq, opts ...grpc.CallOption) (*GetListCrewKpiRuleRes, error) {
	out := new(GetListCrewKpiRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewKpiRule/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewKpiRuleClient) GetAll(ctx context.Context, in *GetAllCrewKpiRuleReq, opts ...grpc.CallOption) (*GetAllCrewKpiRuleRes, error) {
	out := new(GetAllCrewKpiRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewKpiRule/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewKpiRuleClient) Modify(ctx context.Context, in *ModifyCrewKpiRuleReq, opts ...grpc.CallOption) (*ModifyCrewKpiRuleRes, error) {
	out := new(ModifyCrewKpiRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewKpiRule/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewKpiRuleClient) Delete(ctx context.Context, in *DeleteCrewKpiRuleReq, opts ...grpc.CallOption) (*DeleteCrewKpiRuleRes, error) {
	out := new(DeleteCrewKpiRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewKpiRule/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrewKpiRuleServer is the server API for CrewKpiRule service.
type CrewKpiRuleServer interface {
	Create(context.Context, *CreateCrewKpiRuleReq) (*CreateCrewKpiRuleRes, error)
	GetOne(context.Context, *GetOneCrewKpiRuleReq) (*GetOneCrewKpiRuleRes, error)
	GetList(context.Context, *GetListCrewKpiRuleReq) (*GetListCrewKpiRuleRes, error)
	GetAll(context.Context, *GetAllCrewKpiRuleReq) (*GetAllCrewKpiRuleRes, error)
	Modify(context.Context, *ModifyCrewKpiRuleReq) (*ModifyCrewKpiRuleRes, error)
	Delete(context.Context, *DeleteCrewKpiRuleReq) (*DeleteCrewKpiRuleRes, error)
}

// UnimplementedCrewKpiRuleServer can be embedded to have forward compatible implementations.
type UnimplementedCrewKpiRuleServer struct {
}

func (*UnimplementedCrewKpiRuleServer) Create(context.Context, *CreateCrewKpiRuleReq) (*CreateCrewKpiRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCrewKpiRuleServer) GetOne(context.Context, *GetOneCrewKpiRuleReq) (*GetOneCrewKpiRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedCrewKpiRuleServer) GetList(context.Context, *GetListCrewKpiRuleReq) (*GetListCrewKpiRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (*UnimplementedCrewKpiRuleServer) GetAll(context.Context, *GetAllCrewKpiRuleReq) (*GetAllCrewKpiRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedCrewKpiRuleServer) Modify(context.Context, *ModifyCrewKpiRuleReq) (*ModifyCrewKpiRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (*UnimplementedCrewKpiRuleServer) Delete(context.Context, *DeleteCrewKpiRuleReq) (*DeleteCrewKpiRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCrewKpiRuleServer(s *grpc.Server, srv CrewKpiRuleServer) {
	s.RegisterService(&_CrewKpiRule_serviceDesc, srv)
}

func _CrewKpiRule_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCrewKpiRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewKpiRuleServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewKpiRule/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewKpiRuleServer).Create(ctx, req.(*CreateCrewKpiRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewKpiRule_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneCrewKpiRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewKpiRuleServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewKpiRule/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewKpiRuleServer).GetOne(ctx, req.(*GetOneCrewKpiRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewKpiRule_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCrewKpiRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewKpiRuleServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewKpiRule/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewKpiRuleServer).GetList(ctx, req.(*GetListCrewKpiRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewKpiRule_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCrewKpiRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewKpiRuleServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewKpiRule/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewKpiRuleServer).GetAll(ctx, req.(*GetAllCrewKpiRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewKpiRule_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCrewKpiRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewKpiRuleServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewKpiRule/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewKpiRuleServer).Modify(ctx, req.(*ModifyCrewKpiRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewKpiRule_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCrewKpiRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewKpiRuleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewKpiRule/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewKpiRuleServer).Delete(ctx, req.(*DeleteCrewKpiRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CrewKpiRule_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.CrewKpiRule",
	HandlerType: (*CrewKpiRuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CrewKpiRule_Create_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _CrewKpiRule_GetOne_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _CrewKpiRule_GetList_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CrewKpiRule_GetAll_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _CrewKpiRule_Modify_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CrewKpiRule_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/inspirit/v1/crew_kpi_rule.proto",
}
