// protoc --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: config/inspirit/v1/crew_overtime_rule.proto

package v1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	v1 "github.com/lj1570693659/gfcq_protoc/config/product/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CrewOvertimeRule is the golang structure for table crew_overtime_rule.
type CrewOvertimeRuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	Redio      float32           `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio"`                                     // 浮动比例
	ScoreMin   float32           `protobuf:"fixed32,3,opt,name=ScoreMin,proto3" json:"ScoreMin"`                               // 分值下限
	ScoreMax   float32           `protobuf:"fixed32,4,opt,name=ScoreMax,proto3" json:"ScoreMax"`                               // 分值上限
	ScoreRange v1.ScoreRangeEnum `protobuf:"varint,5,opt,name=ScoreRange,proto3,enum=config.ScoreRangeEnum" json:"ScoreRange"` // 分数区间包含关系（1：左闭右开，2：左开右闭）
	Remark     string            `protobuf:"bytes,6,opt,name=Remark,proto3" json:"Remark"`                                     // 预留备注说明信息
	CreateTime string            `protobuf:"bytes,7,opt,name=CreateTime,proto3" json:"CreateTime"`                             // 数据新增时间
	UpdateTime string            `protobuf:"bytes,8,opt,name=UpdateTime,proto3" json:"UpdateTime"`                             // 最后一次更新数据时间
}

func (x *CrewOvertimeRuleInfo) Reset() {
	*x = CrewOvertimeRuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrewOvertimeRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrewOvertimeRuleInfo) ProtoMessage() {}

func (x *CrewOvertimeRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrewOvertimeRuleInfo.ProtoReflect.Descriptor instead.
func (*CrewOvertimeRuleInfo) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP(), []int{0}
}

func (x *CrewOvertimeRuleInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CrewOvertimeRuleInfo) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *CrewOvertimeRuleInfo) GetScoreMin() float32 {
	if x != nil {
		return x.ScoreMin
	}
	return 0
}

func (x *CrewOvertimeRuleInfo) GetScoreMax() float32 {
	if x != nil {
		return x.ScoreMax
	}
	return 0
}

func (x *CrewOvertimeRuleInfo) GetScoreRange() v1.ScoreRangeEnum {
	if x != nil {
		return x.ScoreRange
	}
	return v1.ScoreRangeEnum(0)
}

func (x *CrewOvertimeRuleInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CrewOvertimeRuleInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CrewOvertimeRuleInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 创建数据接口输入数据结构
type CreateCrewOvertimeRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark     string            `protobuf:"bytes,1,opt,name=Remark,proto3" json:"Remark"`
	Redio      float32           `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio"`                                     // 浮动比例
	ScoreMin   float32           `protobuf:"fixed32,3,opt,name=ScoreMin,proto3" json:"ScoreMin"`                               // 分值下限
	ScoreMax   float32           `protobuf:"fixed32,4,opt,name=ScoreMax,proto3" json:"ScoreMax"`                               // 分值上限
	ScoreRange v1.ScoreRangeEnum `protobuf:"varint,5,opt,name=ScoreRange,proto3,enum=config.ScoreRangeEnum" json:"ScoreRange"` // 分数区间包含关系（1：左闭右开，2：左开右闭）
}

func (x *CreateCrewOvertimeRuleReq) Reset() {
	*x = CreateCrewOvertimeRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCrewOvertimeRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCrewOvertimeRuleReq) ProtoMessage() {}

func (x *CreateCrewOvertimeRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCrewOvertimeRuleReq.ProtoReflect.Descriptor instead.
func (*CreateCrewOvertimeRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCrewOvertimeRuleReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateCrewOvertimeRuleReq) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *CreateCrewOvertimeRuleReq) GetScoreMin() float32 {
	if x != nil {
		return x.ScoreMin
	}
	return 0
}

func (x *CreateCrewOvertimeRuleReq) GetScoreMax() float32 {
	if x != nil {
		return x.ScoreMax
	}
	return 0
}

func (x *CreateCrewOvertimeRuleReq) GetScoreRange() v1.ScoreRangeEnum {
	if x != nil {
		return x.ScoreRange
	}
	return v1.ScoreRangeEnum(0)
}

// 创建数据接口输出数据结构
type CreateCrewOvertimeRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewOvertimeRule *CrewOvertimeRuleInfo `protobuf:"bytes,1,opt,name=CrewOvertimeRule,proto3" json:"CrewOvertimeRule"`
}

func (x *CreateCrewOvertimeRuleRes) Reset() {
	*x = CreateCrewOvertimeRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCrewOvertimeRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCrewOvertimeRuleRes) ProtoMessage() {}

func (x *CreateCrewOvertimeRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCrewOvertimeRuleRes.ProtoReflect.Descriptor instead.
func (*CreateCrewOvertimeRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCrewOvertimeRuleRes) GetCrewOvertimeRule() *CrewOvertimeRuleInfo {
	if x != nil {
		return x.CrewOvertimeRule
	}
	return nil
}

// 获取详情接口输入数据结构
type GetOneCrewOvertimeRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewOvertimeRule *CrewOvertimeRuleInfo `protobuf:"bytes,1,opt,name=CrewOvertimeRule,proto3" json:"CrewOvertimeRule"`
}

func (x *GetOneCrewOvertimeRuleReq) Reset() {
	*x = GetOneCrewOvertimeRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneCrewOvertimeRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneCrewOvertimeRuleReq) ProtoMessage() {}

func (x *GetOneCrewOvertimeRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneCrewOvertimeRuleReq.ProtoReflect.Descriptor instead.
func (*GetOneCrewOvertimeRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP(), []int{3}
}

func (x *GetOneCrewOvertimeRuleReq) GetCrewOvertimeRule() *CrewOvertimeRuleInfo {
	if x != nil {
		return x.CrewOvertimeRule
	}
	return nil
}

// 获取详情接口输出数据结构
type GetOneCrewOvertimeRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewOvertimeRule *CrewOvertimeRuleInfo `protobuf:"bytes,1,opt,name=CrewOvertimeRule,proto3" json:"CrewOvertimeRule"`
}

func (x *GetOneCrewOvertimeRuleRes) Reset() {
	*x = GetOneCrewOvertimeRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneCrewOvertimeRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneCrewOvertimeRuleRes) ProtoMessage() {}

func (x *GetOneCrewOvertimeRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneCrewOvertimeRuleRes.ProtoReflect.Descriptor instead.
func (*GetOneCrewOvertimeRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP(), []int{4}
}

func (x *GetOneCrewOvertimeRuleRes) GetCrewOvertimeRule() *CrewOvertimeRuleInfo {
	if x != nil {
		return x.CrewOvertimeRule
	}
	return nil
}

// 列表接口输入数据结构
type GetListCrewOvertimeRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page             int32                 `protobuf:"varint,1,opt,name=Page,proto3" json:"Page"`
	Size             int32                 `protobuf:"varint,2,opt,name=Size,proto3" json:"Size"`
	CrewOvertimeRule *CrewOvertimeRuleInfo `protobuf:"bytes,3,opt,name=CrewOvertimeRule,proto3" json:"CrewOvertimeRule"`
}

func (x *GetListCrewOvertimeRuleReq) Reset() {
	*x = GetListCrewOvertimeRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListCrewOvertimeRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListCrewOvertimeRuleReq) ProtoMessage() {}

func (x *GetListCrewOvertimeRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListCrewOvertimeRuleReq.ProtoReflect.Descriptor instead.
func (*GetListCrewOvertimeRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP(), []int{5}
}

func (x *GetListCrewOvertimeRuleReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListCrewOvertimeRuleReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetListCrewOvertimeRuleReq) GetCrewOvertimeRule() *CrewOvertimeRuleInfo {
	if x != nil {
		return x.CrewOvertimeRule
	}
	return nil
}

// 列表接口输出数据结构
type GetListCrewOvertimeRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32                   `protobuf:"varint,1,opt,name=Page,proto3" json:"Page"`
	Size      int32                   `protobuf:"varint,2,opt,name=Size,proto3" json:"Size"`
	TotalSize int32                   `protobuf:"varint,3,opt,name=TotalSize,proto3" json:"TotalSize"`
	Data      []*CrewOvertimeRuleInfo `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data"`
}

func (x *GetListCrewOvertimeRuleRes) Reset() {
	*x = GetListCrewOvertimeRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListCrewOvertimeRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListCrewOvertimeRuleRes) ProtoMessage() {}

func (x *GetListCrewOvertimeRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListCrewOvertimeRuleRes.ProtoReflect.Descriptor instead.
func (*GetListCrewOvertimeRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP(), []int{6}
}

func (x *GetListCrewOvertimeRuleRes) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListCrewOvertimeRuleRes) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetListCrewOvertimeRuleRes) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *GetListCrewOvertimeRuleRes) GetData() []*CrewOvertimeRuleInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 修改数据接口输入数据结构
type ModifyCrewOvertimeRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark     string            `protobuf:"bytes,1,opt,name=Remark,proto3" json:"Remark"`
	Redio      float32           `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio"`                                     // 浮动比例
	ScoreMin   float32           `protobuf:"fixed32,3,opt,name=ScoreMin,proto3" json:"ScoreMin"`                               // 分值下限
	ScoreMax   float32           `protobuf:"fixed32,4,opt,name=ScoreMax,proto3" json:"ScoreMax"`                               // 分值上限
	ScoreRange v1.ScoreRangeEnum `protobuf:"varint,5,opt,name=ScoreRange,proto3,enum=config.ScoreRangeEnum" json:"ScoreRange"` // 分数区间包含关系（1：左闭右开，2：左开右闭）
	Id         int32             `protobuf:"varint,6,opt,name=Id,proto3" json:"Id"`                                            // v: required
}

func (x *ModifyCrewOvertimeRuleReq) Reset() {
	*x = ModifyCrewOvertimeRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCrewOvertimeRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCrewOvertimeRuleReq) ProtoMessage() {}

func (x *ModifyCrewOvertimeRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCrewOvertimeRuleReq.ProtoReflect.Descriptor instead.
func (*ModifyCrewOvertimeRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP(), []int{7}
}

func (x *ModifyCrewOvertimeRuleReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ModifyCrewOvertimeRuleReq) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *ModifyCrewOvertimeRuleReq) GetScoreMin() float32 {
	if x != nil {
		return x.ScoreMin
	}
	return 0
}

func (x *ModifyCrewOvertimeRuleReq) GetScoreMax() float32 {
	if x != nil {
		return x.ScoreMax
	}
	return 0
}

func (x *ModifyCrewOvertimeRuleReq) GetScoreRange() v1.ScoreRangeEnum {
	if x != nil {
		return x.ScoreRange
	}
	return v1.ScoreRangeEnum(0)
}

func (x *ModifyCrewOvertimeRuleReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 修改数据接口输出数据结构
type ModifyCrewOvertimeRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewOvertimeRule *CrewOvertimeRuleInfo `protobuf:"bytes,1,opt,name=CrewOvertimeRule,proto3" json:"CrewOvertimeRule"`
}

func (x *ModifyCrewOvertimeRuleRes) Reset() {
	*x = ModifyCrewOvertimeRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCrewOvertimeRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCrewOvertimeRuleRes) ProtoMessage() {}

func (x *ModifyCrewOvertimeRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCrewOvertimeRuleRes.ProtoReflect.Descriptor instead.
func (*ModifyCrewOvertimeRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP(), []int{8}
}

func (x *ModifyCrewOvertimeRuleRes) GetCrewOvertimeRule() *CrewOvertimeRuleInfo {
	if x != nil {
		return x.CrewOvertimeRule
	}
	return nil
}

// 删除数据接口输入数据结构
type DeleteCrewOvertimeRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"` // v: required
}

func (x *DeleteCrewOvertimeRuleReq) Reset() {
	*x = DeleteCrewOvertimeRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCrewOvertimeRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrewOvertimeRuleReq) ProtoMessage() {}

func (x *DeleteCrewOvertimeRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrewOvertimeRuleReq.ProtoReflect.Descriptor instead.
func (*DeleteCrewOvertimeRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteCrewOvertimeRuleReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 删除数据接口输出数据结构
type DeleteCrewOvertimeRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool   `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess"` // v: required
	Msg       string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg"`              // v: required
}

func (x *DeleteCrewOvertimeRuleRes) Reset() {
	*x = DeleteCrewOvertimeRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCrewOvertimeRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrewOvertimeRuleRes) ProtoMessage() {}

func (x *DeleteCrewOvertimeRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrewOvertimeRuleRes.ProtoReflect.Descriptor instead.
func (*DeleteCrewOvertimeRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCrewOvertimeRuleRes) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *DeleteCrewOvertimeRuleRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_config_inspirit_v1_crew_overtime_rule_proto protoreflect.FileDescriptor

var file_config_inspirit_v1_crew_overtime_rule_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x77, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x02, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x4d, 0x61, 0x78, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x64,
	0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x65, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x65, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x43, 0x72, 0x65,
	0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x65, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72,
	0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x10, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc9, 0x01, 0x0a,
	0x19, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x4d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x36, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x19, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x43,
	0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x32, 0xaf, 0x03, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x50,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x72, 0x65,
	0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72,
	0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6a, 0x31, 0x35, 0x37, 0x30,
	0x36, 0x39, 0x33, 0x36, 0x35, 0x39, 0x2f, 0x67, 0x66, 0x63, 0x71, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x69, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_inspirit_v1_crew_overtime_rule_proto_rawDescOnce sync.Once
	file_config_inspirit_v1_crew_overtime_rule_proto_rawDescData = file_config_inspirit_v1_crew_overtime_rule_proto_rawDesc
)

func file_config_inspirit_v1_crew_overtime_rule_proto_rawDescGZIP() []byte {
	file_config_inspirit_v1_crew_overtime_rule_proto_rawDescOnce.Do(func() {
		file_config_inspirit_v1_crew_overtime_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_inspirit_v1_crew_overtime_rule_proto_rawDescData)
	})
	return file_config_inspirit_v1_crew_overtime_rule_proto_rawDescData
}

var file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_config_inspirit_v1_crew_overtime_rule_proto_goTypes = []interface{}{
	(*CrewOvertimeRuleInfo)(nil),       // 0: config.CrewOvertimeRuleInfo
	(*CreateCrewOvertimeRuleReq)(nil),  // 1: config.CreateCrewOvertimeRuleReq
	(*CreateCrewOvertimeRuleRes)(nil),  // 2: config.CreateCrewOvertimeRuleRes
	(*GetOneCrewOvertimeRuleReq)(nil),  // 3: config.GetOneCrewOvertimeRuleReq
	(*GetOneCrewOvertimeRuleRes)(nil),  // 4: config.GetOneCrewOvertimeRuleRes
	(*GetListCrewOvertimeRuleReq)(nil), // 5: config.GetListCrewOvertimeRuleReq
	(*GetListCrewOvertimeRuleRes)(nil), // 6: config.GetListCrewOvertimeRuleRes
	(*ModifyCrewOvertimeRuleReq)(nil),  // 7: config.ModifyCrewOvertimeRuleReq
	(*ModifyCrewOvertimeRuleRes)(nil),  // 8: config.ModifyCrewOvertimeRuleRes
	(*DeleteCrewOvertimeRuleReq)(nil),  // 9: config.DeleteCrewOvertimeRuleReq
	(*DeleteCrewOvertimeRuleRes)(nil),  // 10: config.DeleteCrewOvertimeRuleRes
	(v1.ScoreRangeEnum)(0),             // 11: config.ScoreRangeEnum
}
var file_config_inspirit_v1_crew_overtime_rule_proto_depIdxs = []int32{
	11, // 0: config.CrewOvertimeRuleInfo.ScoreRange:type_name -> config.ScoreRangeEnum
	11, // 1: config.CreateCrewOvertimeRuleReq.ScoreRange:type_name -> config.ScoreRangeEnum
	0,  // 2: config.CreateCrewOvertimeRuleRes.CrewOvertimeRule:type_name -> config.CrewOvertimeRuleInfo
	0,  // 3: config.GetOneCrewOvertimeRuleReq.CrewOvertimeRule:type_name -> config.CrewOvertimeRuleInfo
	0,  // 4: config.GetOneCrewOvertimeRuleRes.CrewOvertimeRule:type_name -> config.CrewOvertimeRuleInfo
	0,  // 5: config.GetListCrewOvertimeRuleReq.CrewOvertimeRule:type_name -> config.CrewOvertimeRuleInfo
	0,  // 6: config.GetListCrewOvertimeRuleRes.Data:type_name -> config.CrewOvertimeRuleInfo
	11, // 7: config.ModifyCrewOvertimeRuleReq.ScoreRange:type_name -> config.ScoreRangeEnum
	0,  // 8: config.ModifyCrewOvertimeRuleRes.CrewOvertimeRule:type_name -> config.CrewOvertimeRuleInfo
	1,  // 9: config.CrewOvertimeRule.Create:input_type -> config.CreateCrewOvertimeRuleReq
	3,  // 10: config.CrewOvertimeRule.GetOne:input_type -> config.GetOneCrewOvertimeRuleReq
	5,  // 11: config.CrewOvertimeRule.GetList:input_type -> config.GetListCrewOvertimeRuleReq
	7,  // 12: config.CrewOvertimeRule.Modify:input_type -> config.ModifyCrewOvertimeRuleReq
	9,  // 13: config.CrewOvertimeRule.Delete:input_type -> config.DeleteCrewOvertimeRuleReq
	2,  // 14: config.CrewOvertimeRule.Create:output_type -> config.CreateCrewOvertimeRuleRes
	4,  // 15: config.CrewOvertimeRule.GetOne:output_type -> config.GetOneCrewOvertimeRuleRes
	6,  // 16: config.CrewOvertimeRule.GetList:output_type -> config.GetListCrewOvertimeRuleRes
	8,  // 17: config.CrewOvertimeRule.Modify:output_type -> config.ModifyCrewOvertimeRuleRes
	10, // 18: config.CrewOvertimeRule.Delete:output_type -> config.DeleteCrewOvertimeRuleRes
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_config_inspirit_v1_crew_overtime_rule_proto_init() }
func file_config_inspirit_v1_crew_overtime_rule_proto_init() {
	if File_config_inspirit_v1_crew_overtime_rule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrewOvertimeRuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCrewOvertimeRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCrewOvertimeRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneCrewOvertimeRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneCrewOvertimeRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListCrewOvertimeRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListCrewOvertimeRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCrewOvertimeRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCrewOvertimeRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCrewOvertimeRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCrewOvertimeRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_inspirit_v1_crew_overtime_rule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_config_inspirit_v1_crew_overtime_rule_proto_goTypes,
		DependencyIndexes: file_config_inspirit_v1_crew_overtime_rule_proto_depIdxs,
		MessageInfos:      file_config_inspirit_v1_crew_overtime_rule_proto_msgTypes,
	}.Build()
	File_config_inspirit_v1_crew_overtime_rule_proto = out.File
	file_config_inspirit_v1_crew_overtime_rule_proto_rawDesc = nil
	file_config_inspirit_v1_crew_overtime_rule_proto_goTypes = nil
	file_config_inspirit_v1_crew_overtime_rule_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrewOvertimeRuleClient is the client API for CrewOvertimeRule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrewOvertimeRuleClient interface {
	Create(ctx context.Context, in *CreateCrewOvertimeRuleReq, opts ...grpc.CallOption) (*CreateCrewOvertimeRuleRes, error)
	GetOne(ctx context.Context, in *GetOneCrewOvertimeRuleReq, opts ...grpc.CallOption) (*GetOneCrewOvertimeRuleRes, error)
	GetList(ctx context.Context, in *GetListCrewOvertimeRuleReq, opts ...grpc.CallOption) (*GetListCrewOvertimeRuleRes, error)
	Modify(ctx context.Context, in *ModifyCrewOvertimeRuleReq, opts ...grpc.CallOption) (*ModifyCrewOvertimeRuleRes, error)
	Delete(ctx context.Context, in *DeleteCrewOvertimeRuleReq, opts ...grpc.CallOption) (*DeleteCrewOvertimeRuleRes, error)
}

type crewOvertimeRuleClient struct {
	cc grpc.ClientConnInterface
}

func NewCrewOvertimeRuleClient(cc grpc.ClientConnInterface) CrewOvertimeRuleClient {
	return &crewOvertimeRuleClient{cc}
}

func (c *crewOvertimeRuleClient) Create(ctx context.Context, in *CreateCrewOvertimeRuleReq, opts ...grpc.CallOption) (*CreateCrewOvertimeRuleRes, error) {
	out := new(CreateCrewOvertimeRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewOvertimeRule/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewOvertimeRuleClient) GetOne(ctx context.Context, in *GetOneCrewOvertimeRuleReq, opts ...grpc.CallOption) (*GetOneCrewOvertimeRuleRes, error) {
	out := new(GetOneCrewOvertimeRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewOvertimeRule/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewOvertimeRuleClient) GetList(ctx context.Context, in *GetListCrewOvertimeRuleReq, opts ...grpc.CallOption) (*GetListCrewOvertimeRuleRes, error) {
	out := new(GetListCrewOvertimeRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewOvertimeRule/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewOvertimeRuleClient) Modify(ctx context.Context, in *ModifyCrewOvertimeRuleReq, opts ...grpc.CallOption) (*ModifyCrewOvertimeRuleRes, error) {
	out := new(ModifyCrewOvertimeRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewOvertimeRule/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewOvertimeRuleClient) Delete(ctx context.Context, in *DeleteCrewOvertimeRuleReq, opts ...grpc.CallOption) (*DeleteCrewOvertimeRuleRes, error) {
	out := new(DeleteCrewOvertimeRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewOvertimeRule/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrewOvertimeRuleServer is the server API for CrewOvertimeRule service.
type CrewOvertimeRuleServer interface {
	Create(context.Context, *CreateCrewOvertimeRuleReq) (*CreateCrewOvertimeRuleRes, error)
	GetOne(context.Context, *GetOneCrewOvertimeRuleReq) (*GetOneCrewOvertimeRuleRes, error)
	GetList(context.Context, *GetListCrewOvertimeRuleReq) (*GetListCrewOvertimeRuleRes, error)
	Modify(context.Context, *ModifyCrewOvertimeRuleReq) (*ModifyCrewOvertimeRuleRes, error)
	Delete(context.Context, *DeleteCrewOvertimeRuleReq) (*DeleteCrewOvertimeRuleRes, error)
}

// UnimplementedCrewOvertimeRuleServer can be embedded to have forward compatible implementations.
type UnimplementedCrewOvertimeRuleServer struct {
}

func (*UnimplementedCrewOvertimeRuleServer) Create(context.Context, *CreateCrewOvertimeRuleReq) (*CreateCrewOvertimeRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCrewOvertimeRuleServer) GetOne(context.Context, *GetOneCrewOvertimeRuleReq) (*GetOneCrewOvertimeRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedCrewOvertimeRuleServer) GetList(context.Context, *GetListCrewOvertimeRuleReq) (*GetListCrewOvertimeRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (*UnimplementedCrewOvertimeRuleServer) Modify(context.Context, *ModifyCrewOvertimeRuleReq) (*ModifyCrewOvertimeRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (*UnimplementedCrewOvertimeRuleServer) Delete(context.Context, *DeleteCrewOvertimeRuleReq) (*DeleteCrewOvertimeRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCrewOvertimeRuleServer(s *grpc.Server, srv CrewOvertimeRuleServer) {
	s.RegisterService(&_CrewOvertimeRule_serviceDesc, srv)
}

func _CrewOvertimeRule_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCrewOvertimeRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewOvertimeRuleServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewOvertimeRule/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewOvertimeRuleServer).Create(ctx, req.(*CreateCrewOvertimeRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewOvertimeRule_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneCrewOvertimeRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewOvertimeRuleServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewOvertimeRule/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewOvertimeRuleServer).GetOne(ctx, req.(*GetOneCrewOvertimeRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewOvertimeRule_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCrewOvertimeRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewOvertimeRuleServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewOvertimeRule/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewOvertimeRuleServer).GetList(ctx, req.(*GetListCrewOvertimeRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewOvertimeRule_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCrewOvertimeRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewOvertimeRuleServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewOvertimeRule/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewOvertimeRuleServer).Modify(ctx, req.(*ModifyCrewOvertimeRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewOvertimeRule_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCrewOvertimeRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewOvertimeRuleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewOvertimeRule/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewOvertimeRuleServer).Delete(ctx, req.(*DeleteCrewOvertimeRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CrewOvertimeRule_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.CrewOvertimeRule",
	HandlerType: (*CrewOvertimeRuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CrewOvertimeRule_Create_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _CrewOvertimeRule_GetOne_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _CrewOvertimeRule_GetList_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _CrewOvertimeRule_Modify_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CrewOvertimeRule_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/inspirit/v1/crew_overtime_rule.proto",
}
