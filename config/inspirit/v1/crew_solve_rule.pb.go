// protoc --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: config/inspirit/v1/crew_solve_rule.proto

package v1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 贡献标准（1：有突出贡献，2：有重要贡献，3：较低/无贡献）
type DemandEnum int32

const (
	DemandEnum_notSureDemand DemandEnum = 0
	DemandEnum_highlight     DemandEnum = 1
	DemandEnum_middle        DemandEnum = 2
	DemandEnum_less          DemandEnum = 3
)

// Enum value maps for DemandEnum.
var (
	DemandEnum_name = map[int32]string{
		0: "notSureDemand",
		1: "highlight",
		2: "middle",
		3: "less",
	}
	DemandEnum_value = map[string]int32{
		"notSureDemand": 0,
		"highlight":     1,
		"middle":        2,
		"less":          3,
	}
)

func (x DemandEnum) Enum() *DemandEnum {
	p := new(DemandEnum)
	*p = x
	return p
}

func (x DemandEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DemandEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_config_inspirit_v1_crew_solve_rule_proto_enumTypes[0].Descriptor()
}

func (DemandEnum) Type() protoreflect.EnumType {
	return &file_config_inspirit_v1_crew_solve_rule_proto_enumTypes[0]
}

func (x DemandEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DemandEnum.Descriptor instead.
func (DemandEnum) EnumDescriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{0}
}

// CrewCrewSolveRule is the golang structure for table crew_solve_rule.
type CrewSolveRuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32      `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	Redio      float32    `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio"`                         // 浮动比例
	Demand     DemandEnum `protobuf:"varint,3,opt,name=Demand,proto3,enum=config.DemandEnum" json:"Demand"` // 贡献标准（1：有突出贡献，2：有重要贡献，3：较低/无贡献）
	Remark     string     `protobuf:"bytes,4,opt,name=Remark,proto3" json:"Remark"`                         // 预留备注说明信息
	CreateTime string     `protobuf:"bytes,5,opt,name=CreateTime,proto3" json:"CreateTime"`                 // 数据新增时间
	UpdateTime string     `protobuf:"bytes,6,opt,name=UpdateTime,proto3" json:"UpdateTime"`                 // 最后一次更新数据时间
}

func (x *CrewSolveRuleInfo) Reset() {
	*x = CrewSolveRuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrewSolveRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrewSolveRuleInfo) ProtoMessage() {}

func (x *CrewSolveRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrewSolveRuleInfo.ProtoReflect.Descriptor instead.
func (*CrewSolveRuleInfo) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{0}
}

func (x *CrewSolveRuleInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CrewSolveRuleInfo) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *CrewSolveRuleInfo) GetDemand() DemandEnum {
	if x != nil {
		return x.Demand
	}
	return DemandEnum_notSureDemand
}

func (x *CrewSolveRuleInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CrewSolveRuleInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CrewSolveRuleInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 创建数据接口输入数据结构
type CreateCrewSolveRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark string     `protobuf:"bytes,1,opt,name=Remark,proto3" json:"Remark"`
	Redio  float32    `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio"`                         // 浮动比例
	Demand DemandEnum `protobuf:"varint,3,opt,name=Demand,proto3,enum=config.DemandEnum" json:"Demand"` // 贡献标准（1：有突出贡献，2：有重要贡献，3：较低/无贡献）
}

func (x *CreateCrewSolveRuleReq) Reset() {
	*x = CreateCrewSolveRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCrewSolveRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCrewSolveRuleReq) ProtoMessage() {}

func (x *CreateCrewSolveRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCrewSolveRuleReq.ProtoReflect.Descriptor instead.
func (*CreateCrewSolveRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCrewSolveRuleReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateCrewSolveRuleReq) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *CreateCrewSolveRuleReq) GetDemand() DemandEnum {
	if x != nil {
		return x.Demand
	}
	return DemandEnum_notSureDemand
}

// 创建数据接口输出数据结构
type CreateCrewSolveRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewSolveRule *CrewSolveRuleInfo `protobuf:"bytes,1,opt,name=CrewSolveRule,proto3" json:"CrewSolveRule"`
}

func (x *CreateCrewSolveRuleRes) Reset() {
	*x = CreateCrewSolveRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCrewSolveRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCrewSolveRuleRes) ProtoMessage() {}

func (x *CreateCrewSolveRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCrewSolveRuleRes.ProtoReflect.Descriptor instead.
func (*CreateCrewSolveRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCrewSolveRuleRes) GetCrewSolveRule() *CrewSolveRuleInfo {
	if x != nil {
		return x.CrewSolveRule
	}
	return nil
}

// 获取详情接口输入数据结构
type GetOneCrewSolveRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewSolveRule *CrewSolveRuleInfo `protobuf:"bytes,1,opt,name=CrewSolveRule,proto3" json:"CrewSolveRule"`
}

func (x *GetOneCrewSolveRuleReq) Reset() {
	*x = GetOneCrewSolveRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneCrewSolveRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneCrewSolveRuleReq) ProtoMessage() {}

func (x *GetOneCrewSolveRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneCrewSolveRuleReq.ProtoReflect.Descriptor instead.
func (*GetOneCrewSolveRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{3}
}

func (x *GetOneCrewSolveRuleReq) GetCrewSolveRule() *CrewSolveRuleInfo {
	if x != nil {
		return x.CrewSolveRule
	}
	return nil
}

// 获取详情接口输出数据结构
type GetOneCrewSolveRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewSolveRule *CrewSolveRuleInfo `protobuf:"bytes,1,opt,name=CrewSolveRule,proto3" json:"CrewSolveRule"`
}

func (x *GetOneCrewSolveRuleRes) Reset() {
	*x = GetOneCrewSolveRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneCrewSolveRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneCrewSolveRuleRes) ProtoMessage() {}

func (x *GetOneCrewSolveRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneCrewSolveRuleRes.ProtoReflect.Descriptor instead.
func (*GetOneCrewSolveRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{4}
}

func (x *GetOneCrewSolveRuleRes) GetCrewSolveRule() *CrewSolveRuleInfo {
	if x != nil {
		return x.CrewSolveRule
	}
	return nil
}

// 列表接口输入数据结构
type GetListCrewSolveRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          int32              `protobuf:"varint,1,opt,name=Page,proto3" json:"Page"`
	Size          int32              `protobuf:"varint,2,opt,name=Size,proto3" json:"Size"`
	CrewSolveRule *CrewSolveRuleInfo `protobuf:"bytes,3,opt,name=CrewSolveRule,proto3" json:"CrewSolveRule"`
}

func (x *GetListCrewSolveRuleReq) Reset() {
	*x = GetListCrewSolveRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListCrewSolveRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListCrewSolveRuleReq) ProtoMessage() {}

func (x *GetListCrewSolveRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListCrewSolveRuleReq.ProtoReflect.Descriptor instead.
func (*GetListCrewSolveRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{5}
}

func (x *GetListCrewSolveRuleReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListCrewSolveRuleReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetListCrewSolveRuleReq) GetCrewSolveRule() *CrewSolveRuleInfo {
	if x != nil {
		return x.CrewSolveRule
	}
	return nil
}

// 列表接口输出数据结构
type GetListCrewSolveRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32                `protobuf:"varint,1,opt,name=Page,proto3" json:"Page"`
	Size      int32                `protobuf:"varint,2,opt,name=Size,proto3" json:"Size"`
	TotalSize int32                `protobuf:"varint,3,opt,name=TotalSize,proto3" json:"TotalSize"`
	Data      []*CrewSolveRuleInfo `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data"`
}

func (x *GetListCrewSolveRuleRes) Reset() {
	*x = GetListCrewSolveRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListCrewSolveRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListCrewSolveRuleRes) ProtoMessage() {}

func (x *GetListCrewSolveRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListCrewSolveRuleRes.ProtoReflect.Descriptor instead.
func (*GetListCrewSolveRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{6}
}

func (x *GetListCrewSolveRuleRes) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListCrewSolveRuleRes) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetListCrewSolveRuleRes) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *GetListCrewSolveRuleRes) GetData() []*CrewSolveRuleInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 列表接口输入数据结构
type GetAllCrewSolveRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewSolveRule *CrewSolveRuleInfo `protobuf:"bytes,1,opt,name=CrewSolveRule,proto3" json:"CrewSolveRule"`
}

func (x *GetAllCrewSolveRuleReq) Reset() {
	*x = GetAllCrewSolveRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCrewSolveRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCrewSolveRuleReq) ProtoMessage() {}

func (x *GetAllCrewSolveRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCrewSolveRuleReq.ProtoReflect.Descriptor instead.
func (*GetAllCrewSolveRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{7}
}

func (x *GetAllCrewSolveRuleReq) GetCrewSolveRule() *CrewSolveRuleInfo {
	if x != nil {
		return x.CrewSolveRule
	}
	return nil
}

// 列表接口输出数据结构
type GetAllCrewSolveRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CrewSolveRuleInfo `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data"`
}

func (x *GetAllCrewSolveRuleRes) Reset() {
	*x = GetAllCrewSolveRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCrewSolveRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCrewSolveRuleRes) ProtoMessage() {}

func (x *GetAllCrewSolveRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCrewSolveRuleRes.ProtoReflect.Descriptor instead.
func (*GetAllCrewSolveRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllCrewSolveRuleRes) GetData() []*CrewSolveRuleInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 修改数据接口输入数据结构
type ModifyCrewSolveRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark string     `protobuf:"bytes,1,opt,name=Remark,proto3" json:"Remark"`
	Redio  float32    `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio"`                         // 浮动比例
	Demand DemandEnum `protobuf:"varint,3,opt,name=Demand,proto3,enum=config.DemandEnum" json:"Demand"` // 贡献标准（1：有突出贡献，2：有重要贡献，3：较低/无贡献）
	Id     int32      `protobuf:"varint,4,opt,name=Id,proto3" json:"Id"`                                // v: required
}

func (x *ModifyCrewSolveRuleReq) Reset() {
	*x = ModifyCrewSolveRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCrewSolveRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCrewSolveRuleReq) ProtoMessage() {}

func (x *ModifyCrewSolveRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCrewSolveRuleReq.ProtoReflect.Descriptor instead.
func (*ModifyCrewSolveRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{9}
}

func (x *ModifyCrewSolveRuleReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ModifyCrewSolveRuleReq) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *ModifyCrewSolveRuleReq) GetDemand() DemandEnum {
	if x != nil {
		return x.Demand
	}
	return DemandEnum_notSureDemand
}

func (x *ModifyCrewSolveRuleReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 修改数据接口输出数据结构
type ModifyCrewSolveRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrewSolveRule *CrewSolveRuleInfo `protobuf:"bytes,1,opt,name=CrewSolveRule,proto3" json:"CrewSolveRule"`
}

func (x *ModifyCrewSolveRuleRes) Reset() {
	*x = ModifyCrewSolveRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCrewSolveRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCrewSolveRuleRes) ProtoMessage() {}

func (x *ModifyCrewSolveRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCrewSolveRuleRes.ProtoReflect.Descriptor instead.
func (*ModifyCrewSolveRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{10}
}

func (x *ModifyCrewSolveRuleRes) GetCrewSolveRule() *CrewSolveRuleInfo {
	if x != nil {
		return x.CrewSolveRule
	}
	return nil
}

// 删除数据接口输入数据结构
type DeleteCrewSolveRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"` // v: required
}

func (x *DeleteCrewSolveRuleReq) Reset() {
	*x = DeleteCrewSolveRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCrewSolveRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrewSolveRuleReq) ProtoMessage() {}

func (x *DeleteCrewSolveRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrewSolveRuleReq.ProtoReflect.Descriptor instead.
func (*DeleteCrewSolveRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteCrewSolveRuleReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 删除数据接口输出数据结构
type DeleteCrewSolveRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool   `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess"` // v: required
	Msg       string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg"`              // v: required
}

func (x *DeleteCrewSolveRuleRes) Reset() {
	*x = DeleteCrewSolveRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCrewSolveRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrewSolveRuleRes) ProtoMessage() {}

func (x *DeleteCrewSolveRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrewSolveRuleRes.ProtoReflect.Descriptor instead.
func (*DeleteCrewSolveRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteCrewSolveRuleRes) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *DeleteCrewSolveRuleRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_config_inspirit_v1_crew_solve_rule_proto protoreflect.FileDescriptor

var file_config_inspirit_v1_crew_solve_rule_proto_rawDesc = []byte{
	0x0a, 0x28, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x77, 0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x12, 0x2a,
	0x0a, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x72, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77,
	0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x06, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x59, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x59, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x77, 0x53,
	0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77,
	0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x43,
	0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x59, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77,
	0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x43,
	0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x8e, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x77, 0x53,
	0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x77, 0x53,
	0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x77,
	0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x06, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x53,
	0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4d, 0x73, 0x67, 0x2a, 0x44, 0x0a, 0x0a, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x11, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x53, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x65, 0x73, 0x73, 0x10, 0x03, 0x32, 0xda, 0x03, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4a, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x1e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72,
	0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72,
	0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x77, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6a, 0x31, 0x35, 0x37, 0x30, 0x36, 0x39, 0x33,
	0x36, 0x35, 0x39, 0x2f, 0x67, 0x66, 0x63, 0x71, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_inspirit_v1_crew_solve_rule_proto_rawDescOnce sync.Once
	file_config_inspirit_v1_crew_solve_rule_proto_rawDescData = file_config_inspirit_v1_crew_solve_rule_proto_rawDesc
)

func file_config_inspirit_v1_crew_solve_rule_proto_rawDescGZIP() []byte {
	file_config_inspirit_v1_crew_solve_rule_proto_rawDescOnce.Do(func() {
		file_config_inspirit_v1_crew_solve_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_inspirit_v1_crew_solve_rule_proto_rawDescData)
	})
	return file_config_inspirit_v1_crew_solve_rule_proto_rawDescData
}

var file_config_inspirit_v1_crew_solve_rule_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_config_inspirit_v1_crew_solve_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_config_inspirit_v1_crew_solve_rule_proto_goTypes = []interface{}{
	(DemandEnum)(0),                 // 0: config.DemandEnum
	(*CrewSolveRuleInfo)(nil),       // 1: config.CrewSolveRuleInfo
	(*CreateCrewSolveRuleReq)(nil),  // 2: config.CreateCrewSolveRuleReq
	(*CreateCrewSolveRuleRes)(nil),  // 3: config.CreateCrewSolveRuleRes
	(*GetOneCrewSolveRuleReq)(nil),  // 4: config.GetOneCrewSolveRuleReq
	(*GetOneCrewSolveRuleRes)(nil),  // 5: config.GetOneCrewSolveRuleRes
	(*GetListCrewSolveRuleReq)(nil), // 6: config.GetListCrewSolveRuleReq
	(*GetListCrewSolveRuleRes)(nil), // 7: config.GetListCrewSolveRuleRes
	(*GetAllCrewSolveRuleReq)(nil),  // 8: config.GetAllCrewSolveRuleReq
	(*GetAllCrewSolveRuleRes)(nil),  // 9: config.GetAllCrewSolveRuleRes
	(*ModifyCrewSolveRuleReq)(nil),  // 10: config.ModifyCrewSolveRuleReq
	(*ModifyCrewSolveRuleRes)(nil),  // 11: config.ModifyCrewSolveRuleRes
	(*DeleteCrewSolveRuleReq)(nil),  // 12: config.DeleteCrewSolveRuleReq
	(*DeleteCrewSolveRuleRes)(nil),  // 13: config.DeleteCrewSolveRuleRes
}
var file_config_inspirit_v1_crew_solve_rule_proto_depIdxs = []int32{
	0,  // 0: config.CrewSolveRuleInfo.Demand:type_name -> config.DemandEnum
	0,  // 1: config.CreateCrewSolveRuleReq.Demand:type_name -> config.DemandEnum
	1,  // 2: config.CreateCrewSolveRuleRes.CrewSolveRule:type_name -> config.CrewSolveRuleInfo
	1,  // 3: config.GetOneCrewSolveRuleReq.CrewSolveRule:type_name -> config.CrewSolveRuleInfo
	1,  // 4: config.GetOneCrewSolveRuleRes.CrewSolveRule:type_name -> config.CrewSolveRuleInfo
	1,  // 5: config.GetListCrewSolveRuleReq.CrewSolveRule:type_name -> config.CrewSolveRuleInfo
	1,  // 6: config.GetListCrewSolveRuleRes.Data:type_name -> config.CrewSolveRuleInfo
	1,  // 7: config.GetAllCrewSolveRuleReq.CrewSolveRule:type_name -> config.CrewSolveRuleInfo
	1,  // 8: config.GetAllCrewSolveRuleRes.Data:type_name -> config.CrewSolveRuleInfo
	0,  // 9: config.ModifyCrewSolveRuleReq.Demand:type_name -> config.DemandEnum
	1,  // 10: config.ModifyCrewSolveRuleRes.CrewSolveRule:type_name -> config.CrewSolveRuleInfo
	2,  // 11: config.CrewSolveRule.Create:input_type -> config.CreateCrewSolveRuleReq
	4,  // 12: config.CrewSolveRule.GetOne:input_type -> config.GetOneCrewSolveRuleReq
	6,  // 13: config.CrewSolveRule.GetList:input_type -> config.GetListCrewSolveRuleReq
	8,  // 14: config.CrewSolveRule.GetAll:input_type -> config.GetAllCrewSolveRuleReq
	10, // 15: config.CrewSolveRule.Modify:input_type -> config.ModifyCrewSolveRuleReq
	12, // 16: config.CrewSolveRule.Delete:input_type -> config.DeleteCrewSolveRuleReq
	3,  // 17: config.CrewSolveRule.Create:output_type -> config.CreateCrewSolveRuleRes
	5,  // 18: config.CrewSolveRule.GetOne:output_type -> config.GetOneCrewSolveRuleRes
	7,  // 19: config.CrewSolveRule.GetList:output_type -> config.GetListCrewSolveRuleRes
	9,  // 20: config.CrewSolveRule.GetAll:output_type -> config.GetAllCrewSolveRuleRes
	11, // 21: config.CrewSolveRule.Modify:output_type -> config.ModifyCrewSolveRuleRes
	13, // 22: config.CrewSolveRule.Delete:output_type -> config.DeleteCrewSolveRuleRes
	17, // [17:23] is the sub-list for method output_type
	11, // [11:17] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_config_inspirit_v1_crew_solve_rule_proto_init() }
func file_config_inspirit_v1_crew_solve_rule_proto_init() {
	if File_config_inspirit_v1_crew_solve_rule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrewSolveRuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCrewSolveRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCrewSolveRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneCrewSolveRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneCrewSolveRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListCrewSolveRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListCrewSolveRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCrewSolveRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCrewSolveRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCrewSolveRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCrewSolveRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCrewSolveRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_crew_solve_rule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCrewSolveRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_inspirit_v1_crew_solve_rule_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_config_inspirit_v1_crew_solve_rule_proto_goTypes,
		DependencyIndexes: file_config_inspirit_v1_crew_solve_rule_proto_depIdxs,
		EnumInfos:         file_config_inspirit_v1_crew_solve_rule_proto_enumTypes,
		MessageInfos:      file_config_inspirit_v1_crew_solve_rule_proto_msgTypes,
	}.Build()
	File_config_inspirit_v1_crew_solve_rule_proto = out.File
	file_config_inspirit_v1_crew_solve_rule_proto_rawDesc = nil
	file_config_inspirit_v1_crew_solve_rule_proto_goTypes = nil
	file_config_inspirit_v1_crew_solve_rule_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrewSolveRuleClient is the client API for CrewSolveRule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrewSolveRuleClient interface {
	Create(ctx context.Context, in *CreateCrewSolveRuleReq, opts ...grpc.CallOption) (*CreateCrewSolveRuleRes, error)
	GetOne(ctx context.Context, in *GetOneCrewSolveRuleReq, opts ...grpc.CallOption) (*GetOneCrewSolveRuleRes, error)
	GetList(ctx context.Context, in *GetListCrewSolveRuleReq, opts ...grpc.CallOption) (*GetListCrewSolveRuleRes, error)
	GetAll(ctx context.Context, in *GetAllCrewSolveRuleReq, opts ...grpc.CallOption) (*GetAllCrewSolveRuleRes, error)
	Modify(ctx context.Context, in *ModifyCrewSolveRuleReq, opts ...grpc.CallOption) (*ModifyCrewSolveRuleRes, error)
	Delete(ctx context.Context, in *DeleteCrewSolveRuleReq, opts ...grpc.CallOption) (*DeleteCrewSolveRuleRes, error)
}

type crewSolveRuleClient struct {
	cc grpc.ClientConnInterface
}

func NewCrewSolveRuleClient(cc grpc.ClientConnInterface) CrewSolveRuleClient {
	return &crewSolveRuleClient{cc}
}

func (c *crewSolveRuleClient) Create(ctx context.Context, in *CreateCrewSolveRuleReq, opts ...grpc.CallOption) (*CreateCrewSolveRuleRes, error) {
	out := new(CreateCrewSolveRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewSolveRule/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewSolveRuleClient) GetOne(ctx context.Context, in *GetOneCrewSolveRuleReq, opts ...grpc.CallOption) (*GetOneCrewSolveRuleRes, error) {
	out := new(GetOneCrewSolveRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewSolveRule/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewSolveRuleClient) GetList(ctx context.Context, in *GetListCrewSolveRuleReq, opts ...grpc.CallOption) (*GetListCrewSolveRuleRes, error) {
	out := new(GetListCrewSolveRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewSolveRule/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewSolveRuleClient) GetAll(ctx context.Context, in *GetAllCrewSolveRuleReq, opts ...grpc.CallOption) (*GetAllCrewSolveRuleRes, error) {
	out := new(GetAllCrewSolveRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewSolveRule/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewSolveRuleClient) Modify(ctx context.Context, in *ModifyCrewSolveRuleReq, opts ...grpc.CallOption) (*ModifyCrewSolveRuleRes, error) {
	out := new(ModifyCrewSolveRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewSolveRule/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crewSolveRuleClient) Delete(ctx context.Context, in *DeleteCrewSolveRuleReq, opts ...grpc.CallOption) (*DeleteCrewSolveRuleRes, error) {
	out := new(DeleteCrewSolveRuleRes)
	err := c.cc.Invoke(ctx, "/config.CrewSolveRule/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrewSolveRuleServer is the server API for CrewSolveRule service.
type CrewSolveRuleServer interface {
	Create(context.Context, *CreateCrewSolveRuleReq) (*CreateCrewSolveRuleRes, error)
	GetOne(context.Context, *GetOneCrewSolveRuleReq) (*GetOneCrewSolveRuleRes, error)
	GetList(context.Context, *GetListCrewSolveRuleReq) (*GetListCrewSolveRuleRes, error)
	GetAll(context.Context, *GetAllCrewSolveRuleReq) (*GetAllCrewSolveRuleRes, error)
	Modify(context.Context, *ModifyCrewSolveRuleReq) (*ModifyCrewSolveRuleRes, error)
	Delete(context.Context, *DeleteCrewSolveRuleReq) (*DeleteCrewSolveRuleRes, error)
}

// UnimplementedCrewSolveRuleServer can be embedded to have forward compatible implementations.
type UnimplementedCrewSolveRuleServer struct {
}

func (*UnimplementedCrewSolveRuleServer) Create(context.Context, *CreateCrewSolveRuleReq) (*CreateCrewSolveRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCrewSolveRuleServer) GetOne(context.Context, *GetOneCrewSolveRuleReq) (*GetOneCrewSolveRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedCrewSolveRuleServer) GetList(context.Context, *GetListCrewSolveRuleReq) (*GetListCrewSolveRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (*UnimplementedCrewSolveRuleServer) GetAll(context.Context, *GetAllCrewSolveRuleReq) (*GetAllCrewSolveRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedCrewSolveRuleServer) Modify(context.Context, *ModifyCrewSolveRuleReq) (*ModifyCrewSolveRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (*UnimplementedCrewSolveRuleServer) Delete(context.Context, *DeleteCrewSolveRuleReq) (*DeleteCrewSolveRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCrewSolveRuleServer(s *grpc.Server, srv CrewSolveRuleServer) {
	s.RegisterService(&_CrewSolveRule_serviceDesc, srv)
}

func _CrewSolveRule_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCrewSolveRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewSolveRuleServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewSolveRule/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewSolveRuleServer).Create(ctx, req.(*CreateCrewSolveRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewSolveRule_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneCrewSolveRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewSolveRuleServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewSolveRule/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewSolveRuleServer).GetOne(ctx, req.(*GetOneCrewSolveRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewSolveRule_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCrewSolveRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewSolveRuleServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewSolveRule/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewSolveRuleServer).GetList(ctx, req.(*GetListCrewSolveRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewSolveRule_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCrewSolveRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewSolveRuleServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewSolveRule/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewSolveRuleServer).GetAll(ctx, req.(*GetAllCrewSolveRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewSolveRule_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCrewSolveRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewSolveRuleServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewSolveRule/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewSolveRuleServer).Modify(ctx, req.(*ModifyCrewSolveRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrewSolveRule_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCrewSolveRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrewSolveRuleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CrewSolveRule/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrewSolveRuleServer).Delete(ctx, req.(*DeleteCrewSolveRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CrewSolveRule_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.CrewSolveRule",
	HandlerType: (*CrewSolveRuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CrewSolveRule_Create_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _CrewSolveRule_GetOne_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _CrewSolveRule_GetList_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CrewSolveRule_GetAll_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _CrewSolveRule_Modify_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CrewSolveRule_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/inspirit/v1/crew_solve_rule.proto",
}
