// protoc --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: config/inspirit/v1/pm_solve_rule.proto

package v1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PmPmSolveRule is the golang structure for table Pm_solve_rule.
type PmSolveRuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32      `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	Redio      float32    `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio"`                         // 浮动比例
	Demand     DemandEnum `protobuf:"varint,3,opt,name=Demand,proto3,enum=config.DemandEnum" json:"Demand"` // 贡献标准（1：有突出贡献，2：有重要贡献，3：较低/无贡献）
	Remark     string     `protobuf:"bytes,4,opt,name=Remark,proto3" json:"Remark"`                         // 预留备注说明信息
	CreateTime string     `protobuf:"bytes,5,opt,name=CreateTime,proto3" json:"CreateTime"`                 // 数据新增时间
	UpdateTime string     `protobuf:"bytes,6,opt,name=UpdateTime,proto3" json:"UpdateTime"`                 // 最后一次更新数据时间
}

func (x *PmSolveRuleInfo) Reset() {
	*x = PmSolveRuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmSolveRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmSolveRuleInfo) ProtoMessage() {}

func (x *PmSolveRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmSolveRuleInfo.ProtoReflect.Descriptor instead.
func (*PmSolveRuleInfo) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP(), []int{0}
}

func (x *PmSolveRuleInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PmSolveRuleInfo) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *PmSolveRuleInfo) GetDemand() DemandEnum {
	if x != nil {
		return x.Demand
	}
	return DemandEnum_notSureDemand
}

func (x *PmSolveRuleInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PmSolveRuleInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *PmSolveRuleInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 创建数据接口输入数据结构
type CreatePmSolveRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark string     `protobuf:"bytes,1,opt,name=Remark,proto3" json:"Remark"`
	Redio  float32    `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio"`                         // 浮动比例
	Demand DemandEnum `protobuf:"varint,3,opt,name=Demand,proto3,enum=config.DemandEnum" json:"Demand"` // 贡献标准（1：有突出贡献，2：有重要贡献，3：较低/无贡献）
}

func (x *CreatePmSolveRuleReq) Reset() {
	*x = CreatePmSolveRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePmSolveRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePmSolveRuleReq) ProtoMessage() {}

func (x *CreatePmSolveRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePmSolveRuleReq.ProtoReflect.Descriptor instead.
func (*CreatePmSolveRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePmSolveRuleReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreatePmSolveRuleReq) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *CreatePmSolveRuleReq) GetDemand() DemandEnum {
	if x != nil {
		return x.Demand
	}
	return DemandEnum_notSureDemand
}

// 创建数据接口输出数据结构
type CreatePmSolveRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PmSolveRule *PmSolveRuleInfo `protobuf:"bytes,1,opt,name=PmSolveRule,proto3" json:"PmSolveRule"`
}

func (x *CreatePmSolveRuleRes) Reset() {
	*x = CreatePmSolveRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePmSolveRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePmSolveRuleRes) ProtoMessage() {}

func (x *CreatePmSolveRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePmSolveRuleRes.ProtoReflect.Descriptor instead.
func (*CreatePmSolveRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePmSolveRuleRes) GetPmSolveRule() *PmSolveRuleInfo {
	if x != nil {
		return x.PmSolveRule
	}
	return nil
}

// 获取详情接口输入数据结构
type GetOnePmSolveRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PmSolveRule *PmSolveRuleInfo `protobuf:"bytes,1,opt,name=PmSolveRule,proto3" json:"PmSolveRule"`
}

func (x *GetOnePmSolveRuleReq) Reset() {
	*x = GetOnePmSolveRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnePmSolveRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnePmSolveRuleReq) ProtoMessage() {}

func (x *GetOnePmSolveRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnePmSolveRuleReq.ProtoReflect.Descriptor instead.
func (*GetOnePmSolveRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP(), []int{3}
}

func (x *GetOnePmSolveRuleReq) GetPmSolveRule() *PmSolveRuleInfo {
	if x != nil {
		return x.PmSolveRule
	}
	return nil
}

// 获取详情接口输出数据结构
type GetOnePmSolveRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PmSolveRule *PmSolveRuleInfo `protobuf:"bytes,1,opt,name=PmSolveRule,proto3" json:"PmSolveRule"`
}

func (x *GetOnePmSolveRuleRes) Reset() {
	*x = GetOnePmSolveRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnePmSolveRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnePmSolveRuleRes) ProtoMessage() {}

func (x *GetOnePmSolveRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnePmSolveRuleRes.ProtoReflect.Descriptor instead.
func (*GetOnePmSolveRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP(), []int{4}
}

func (x *GetOnePmSolveRuleRes) GetPmSolveRule() *PmSolveRuleInfo {
	if x != nil {
		return x.PmSolveRule
	}
	return nil
}

// 列表接口输入数据结构
type GetListPmSolveRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        int32            `protobuf:"varint,1,opt,name=Page,proto3" json:"Page"`
	Size        int32            `protobuf:"varint,2,opt,name=Size,proto3" json:"Size"`
	PmSolveRule *PmSolveRuleInfo `protobuf:"bytes,3,opt,name=PmSolveRule,proto3" json:"PmSolveRule"`
}

func (x *GetListPmSolveRuleReq) Reset() {
	*x = GetListPmSolveRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListPmSolveRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListPmSolveRuleReq) ProtoMessage() {}

func (x *GetListPmSolveRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListPmSolveRuleReq.ProtoReflect.Descriptor instead.
func (*GetListPmSolveRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP(), []int{5}
}

func (x *GetListPmSolveRuleReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListPmSolveRuleReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetListPmSolveRuleReq) GetPmSolveRule() *PmSolveRuleInfo {
	if x != nil {
		return x.PmSolveRule
	}
	return nil
}

// 列表接口输出数据结构
type GetListPmSolveRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32              `protobuf:"varint,1,opt,name=Page,proto3" json:"Page"`
	Size      int32              `protobuf:"varint,2,opt,name=Size,proto3" json:"Size"`
	TotalSize int32              `protobuf:"varint,3,opt,name=TotalSize,proto3" json:"TotalSize"`
	Data      []*PmSolveRuleInfo `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data"`
}

func (x *GetListPmSolveRuleRes) Reset() {
	*x = GetListPmSolveRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListPmSolveRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListPmSolveRuleRes) ProtoMessage() {}

func (x *GetListPmSolveRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListPmSolveRuleRes.ProtoReflect.Descriptor instead.
func (*GetListPmSolveRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP(), []int{6}
}

func (x *GetListPmSolveRuleRes) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListPmSolveRuleRes) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetListPmSolveRuleRes) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *GetListPmSolveRuleRes) GetData() []*PmSolveRuleInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 修改数据接口输入数据结构
type ModifyPmSolveRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark string     `protobuf:"bytes,1,opt,name=Remark,proto3" json:"Remark"`
	Redio  float32    `protobuf:"fixed32,2,opt,name=Redio,proto3" json:"Redio"`                         // 浮动比例
	Demand DemandEnum `protobuf:"varint,3,opt,name=Demand,proto3,enum=config.DemandEnum" json:"Demand"` // 贡献标准（1：有突出贡献，2：有重要贡献，3：较低/无贡献）
	Id     int32      `protobuf:"varint,4,opt,name=Id,proto3" json:"Id"`                                // v: required
}

func (x *ModifyPmSolveRuleReq) Reset() {
	*x = ModifyPmSolveRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPmSolveRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPmSolveRuleReq) ProtoMessage() {}

func (x *ModifyPmSolveRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPmSolveRuleReq.ProtoReflect.Descriptor instead.
func (*ModifyPmSolveRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP(), []int{7}
}

func (x *ModifyPmSolveRuleReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ModifyPmSolveRuleReq) GetRedio() float32 {
	if x != nil {
		return x.Redio
	}
	return 0
}

func (x *ModifyPmSolveRuleReq) GetDemand() DemandEnum {
	if x != nil {
		return x.Demand
	}
	return DemandEnum_notSureDemand
}

func (x *ModifyPmSolveRuleReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 修改数据接口输出数据结构
type ModifyPmSolveRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PmSolveRule *PmSolveRuleInfo `protobuf:"bytes,1,opt,name=PmSolveRule,proto3" json:"PmSolveRule"`
}

func (x *ModifyPmSolveRuleRes) Reset() {
	*x = ModifyPmSolveRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPmSolveRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPmSolveRuleRes) ProtoMessage() {}

func (x *ModifyPmSolveRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPmSolveRuleRes.ProtoReflect.Descriptor instead.
func (*ModifyPmSolveRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP(), []int{8}
}

func (x *ModifyPmSolveRuleRes) GetPmSolveRule() *PmSolveRuleInfo {
	if x != nil {
		return x.PmSolveRule
	}
	return nil
}

// 删除数据接口输入数据结构
type DeletePmSolveRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"` // v: required
}

func (x *DeletePmSolveRuleReq) Reset() {
	*x = DeletePmSolveRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePmSolveRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePmSolveRuleReq) ProtoMessage() {}

func (x *DeletePmSolveRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePmSolveRuleReq.ProtoReflect.Descriptor instead.
func (*DeletePmSolveRuleReq) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP(), []int{9}
}

func (x *DeletePmSolveRuleReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 删除数据接口输出数据结构
type DeletePmSolveRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool   `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess"` // v: required
	Msg       string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg"`              // v: required
}

func (x *DeletePmSolveRuleRes) Reset() {
	*x = DeletePmSolveRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePmSolveRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePmSolveRuleRes) ProtoMessage() {}

func (x *DeletePmSolveRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePmSolveRuleRes.ProtoReflect.Descriptor instead.
func (*DeletePmSolveRuleRes) Descriptor() ([]byte, []int) {
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP(), []int{10}
}

func (x *DeletePmSolveRuleRes) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *DeletePmSolveRuleRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_config_inspirit_v1_pm_solve_rule_proto protoreflect.FileDescriptor

var file_config_inspirit_v1_pm_solve_rule_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6d, 0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x28, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x77, 0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x0f, 0x50,
	0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x52,
	0x65, 0x64, 0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x12, 0x2a,
	0x0a, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x51, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x51, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x0b, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0x51, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x50, 0x6d, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6d,
	0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6d, 0x53, 0x6f, 0x6c,
	0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x80, 0x01, 0x0a,
	0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x65, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x52, 0x65,
	0x64, 0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x51, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x50, 0x6d, 0x53, 0x6f, 0x6c,
	0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6d, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d,
	0x73, 0x67, 0x32, 0xf8, 0x02, 0x0a, 0x0b, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6d, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6d,
	0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6d, 0x53,
	0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x06, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6d, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6d, 0x53,
	0x6f, 0x6c, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x38, 0x5a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6a, 0x31, 0x35,
	0x37, 0x30, 0x36, 0x39, 0x33, 0x36, 0x35, 0x39, 0x2f, 0x67, 0x66, 0x63, 0x71, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_inspirit_v1_pm_solve_rule_proto_rawDescOnce sync.Once
	file_config_inspirit_v1_pm_solve_rule_proto_rawDescData = file_config_inspirit_v1_pm_solve_rule_proto_rawDesc
)

func file_config_inspirit_v1_pm_solve_rule_proto_rawDescGZIP() []byte {
	file_config_inspirit_v1_pm_solve_rule_proto_rawDescOnce.Do(func() {
		file_config_inspirit_v1_pm_solve_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_inspirit_v1_pm_solve_rule_proto_rawDescData)
	})
	return file_config_inspirit_v1_pm_solve_rule_proto_rawDescData
}

var file_config_inspirit_v1_pm_solve_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_config_inspirit_v1_pm_solve_rule_proto_goTypes = []interface{}{
	(*PmSolveRuleInfo)(nil),       // 0: config.PmSolveRuleInfo
	(*CreatePmSolveRuleReq)(nil),  // 1: config.CreatePmSolveRuleReq
	(*CreatePmSolveRuleRes)(nil),  // 2: config.CreatePmSolveRuleRes
	(*GetOnePmSolveRuleReq)(nil),  // 3: config.GetOnePmSolveRuleReq
	(*GetOnePmSolveRuleRes)(nil),  // 4: config.GetOnePmSolveRuleRes
	(*GetListPmSolveRuleReq)(nil), // 5: config.GetListPmSolveRuleReq
	(*GetListPmSolveRuleRes)(nil), // 6: config.GetListPmSolveRuleRes
	(*ModifyPmSolveRuleReq)(nil),  // 7: config.ModifyPmSolveRuleReq
	(*ModifyPmSolveRuleRes)(nil),  // 8: config.ModifyPmSolveRuleRes
	(*DeletePmSolveRuleReq)(nil),  // 9: config.DeletePmSolveRuleReq
	(*DeletePmSolveRuleRes)(nil),  // 10: config.DeletePmSolveRuleRes
	(DemandEnum)(0),               // 11: config.DemandEnum
}
var file_config_inspirit_v1_pm_solve_rule_proto_depIdxs = []int32{
	11, // 0: config.PmSolveRuleInfo.Demand:type_name -> config.DemandEnum
	11, // 1: config.CreatePmSolveRuleReq.Demand:type_name -> config.DemandEnum
	0,  // 2: config.CreatePmSolveRuleRes.PmSolveRule:type_name -> config.PmSolveRuleInfo
	0,  // 3: config.GetOnePmSolveRuleReq.PmSolveRule:type_name -> config.PmSolveRuleInfo
	0,  // 4: config.GetOnePmSolveRuleRes.PmSolveRule:type_name -> config.PmSolveRuleInfo
	0,  // 5: config.GetListPmSolveRuleReq.PmSolveRule:type_name -> config.PmSolveRuleInfo
	0,  // 6: config.GetListPmSolveRuleRes.Data:type_name -> config.PmSolveRuleInfo
	11, // 7: config.ModifyPmSolveRuleReq.Demand:type_name -> config.DemandEnum
	0,  // 8: config.ModifyPmSolveRuleRes.PmSolveRule:type_name -> config.PmSolveRuleInfo
	1,  // 9: config.PmSolveRule.Create:input_type -> config.CreatePmSolveRuleReq
	3,  // 10: config.PmSolveRule.GetOne:input_type -> config.GetOnePmSolveRuleReq
	5,  // 11: config.PmSolveRule.GetList:input_type -> config.GetListPmSolveRuleReq
	7,  // 12: config.PmSolveRule.Modify:input_type -> config.ModifyPmSolveRuleReq
	9,  // 13: config.PmSolveRule.Delete:input_type -> config.DeletePmSolveRuleReq
	2,  // 14: config.PmSolveRule.Create:output_type -> config.CreatePmSolveRuleRes
	4,  // 15: config.PmSolveRule.GetOne:output_type -> config.GetOnePmSolveRuleRes
	6,  // 16: config.PmSolveRule.GetList:output_type -> config.GetListPmSolveRuleRes
	8,  // 17: config.PmSolveRule.Modify:output_type -> config.ModifyPmSolveRuleRes
	10, // 18: config.PmSolveRule.Delete:output_type -> config.DeletePmSolveRuleRes
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_config_inspirit_v1_pm_solve_rule_proto_init() }
func file_config_inspirit_v1_pm_solve_rule_proto_init() {
	if File_config_inspirit_v1_pm_solve_rule_proto != nil {
		return
	}
	file_config_inspirit_v1_crew_solve_rule_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmSolveRuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePmSolveRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePmSolveRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOnePmSolveRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOnePmSolveRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListPmSolveRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListPmSolveRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPmSolveRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPmSolveRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePmSolveRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_inspirit_v1_pm_solve_rule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePmSolveRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_inspirit_v1_pm_solve_rule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_config_inspirit_v1_pm_solve_rule_proto_goTypes,
		DependencyIndexes: file_config_inspirit_v1_pm_solve_rule_proto_depIdxs,
		MessageInfos:      file_config_inspirit_v1_pm_solve_rule_proto_msgTypes,
	}.Build()
	File_config_inspirit_v1_pm_solve_rule_proto = out.File
	file_config_inspirit_v1_pm_solve_rule_proto_rawDesc = nil
	file_config_inspirit_v1_pm_solve_rule_proto_goTypes = nil
	file_config_inspirit_v1_pm_solve_rule_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PmSolveRuleClient is the client API for PmSolveRule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PmSolveRuleClient interface {
	Create(ctx context.Context, in *CreatePmSolveRuleReq, opts ...grpc.CallOption) (*CreatePmSolveRuleRes, error)
	GetOne(ctx context.Context, in *GetOnePmSolveRuleReq, opts ...grpc.CallOption) (*GetOnePmSolveRuleRes, error)
	GetList(ctx context.Context, in *GetListPmSolveRuleReq, opts ...grpc.CallOption) (*GetListPmSolveRuleRes, error)
	Modify(ctx context.Context, in *ModifyPmSolveRuleReq, opts ...grpc.CallOption) (*ModifyPmSolveRuleRes, error)
	Delete(ctx context.Context, in *DeletePmSolveRuleReq, opts ...grpc.CallOption) (*DeletePmSolveRuleRes, error)
}

type pmSolveRuleClient struct {
	cc grpc.ClientConnInterface
}

func NewPmSolveRuleClient(cc grpc.ClientConnInterface) PmSolveRuleClient {
	return &pmSolveRuleClient{cc}
}

func (c *pmSolveRuleClient) Create(ctx context.Context, in *CreatePmSolveRuleReq, opts ...grpc.CallOption) (*CreatePmSolveRuleRes, error) {
	out := new(CreatePmSolveRuleRes)
	err := c.cc.Invoke(ctx, "/config.PmSolveRule/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmSolveRuleClient) GetOne(ctx context.Context, in *GetOnePmSolveRuleReq, opts ...grpc.CallOption) (*GetOnePmSolveRuleRes, error) {
	out := new(GetOnePmSolveRuleRes)
	err := c.cc.Invoke(ctx, "/config.PmSolveRule/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmSolveRuleClient) GetList(ctx context.Context, in *GetListPmSolveRuleReq, opts ...grpc.CallOption) (*GetListPmSolveRuleRes, error) {
	out := new(GetListPmSolveRuleRes)
	err := c.cc.Invoke(ctx, "/config.PmSolveRule/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmSolveRuleClient) Modify(ctx context.Context, in *ModifyPmSolveRuleReq, opts ...grpc.CallOption) (*ModifyPmSolveRuleRes, error) {
	out := new(ModifyPmSolveRuleRes)
	err := c.cc.Invoke(ctx, "/config.PmSolveRule/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmSolveRuleClient) Delete(ctx context.Context, in *DeletePmSolveRuleReq, opts ...grpc.CallOption) (*DeletePmSolveRuleRes, error) {
	out := new(DeletePmSolveRuleRes)
	err := c.cc.Invoke(ctx, "/config.PmSolveRule/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PmSolveRuleServer is the server API for PmSolveRule service.
type PmSolveRuleServer interface {
	Create(context.Context, *CreatePmSolveRuleReq) (*CreatePmSolveRuleRes, error)
	GetOne(context.Context, *GetOnePmSolveRuleReq) (*GetOnePmSolveRuleRes, error)
	GetList(context.Context, *GetListPmSolveRuleReq) (*GetListPmSolveRuleRes, error)
	Modify(context.Context, *ModifyPmSolveRuleReq) (*ModifyPmSolveRuleRes, error)
	Delete(context.Context, *DeletePmSolveRuleReq) (*DeletePmSolveRuleRes, error)
}

// UnimplementedPmSolveRuleServer can be embedded to have forward compatible implementations.
type UnimplementedPmSolveRuleServer struct {
}

func (*UnimplementedPmSolveRuleServer) Create(context.Context, *CreatePmSolveRuleReq) (*CreatePmSolveRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedPmSolveRuleServer) GetOne(context.Context, *GetOnePmSolveRuleReq) (*GetOnePmSolveRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedPmSolveRuleServer) GetList(context.Context, *GetListPmSolveRuleReq) (*GetListPmSolveRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (*UnimplementedPmSolveRuleServer) Modify(context.Context, *ModifyPmSolveRuleReq) (*ModifyPmSolveRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (*UnimplementedPmSolveRuleServer) Delete(context.Context, *DeletePmSolveRuleReq) (*DeletePmSolveRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterPmSolveRuleServer(s *grpc.Server, srv PmSolveRuleServer) {
	s.RegisterService(&_PmSolveRule_serviceDesc, srv)
}

func _PmSolveRule_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePmSolveRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmSolveRuleServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.PmSolveRule/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmSolveRuleServer).Create(ctx, req.(*CreatePmSolveRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmSolveRule_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnePmSolveRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmSolveRuleServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.PmSolveRule/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmSolveRuleServer).GetOne(ctx, req.(*GetOnePmSolveRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmSolveRule_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPmSolveRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmSolveRuleServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.PmSolveRule/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmSolveRuleServer).GetList(ctx, req.(*GetListPmSolveRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmSolveRule_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPmSolveRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmSolveRuleServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.PmSolveRule/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmSolveRuleServer).Modify(ctx, req.(*ModifyPmSolveRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmSolveRule_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePmSolveRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmSolveRuleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.PmSolveRule/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmSolveRuleServer).Delete(ctx, req.(*DeletePmSolveRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PmSolveRule_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.PmSolveRule",
	HandlerType: (*PmSolveRuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PmSolveRule_Create_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _PmSolveRule_GetOne_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _PmSolveRule_GetList_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _PmSolveRule_Modify_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PmSolveRule_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/inspirit/v1/pm_solve_rule.proto",
}
